<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/03/15/categories/Deep_learning/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/03/15/categories/Deep_learning/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>import语句：导入其他python文件（称为模块module），使用该模块里定义的类、方法或者变量。</p><p>一般分为两种写法：</p><p><strong>import module_name</strong></p><p>Python会在两个地方寻找这个模块，第一是sys.path，os这个模块所在的目录就在列表sys.path中，一般安装的Python库的目录都可以在sys.path中找到，对于安装好的库，直接import即可。第二个地方就是运行文件所在的目录。</p><p><strong>from package_name import module_name</strong>   </p><p>一般把模块组成的集合称为包（package）。与第一种写法类似，Python会在sys.path和运行文件目录这两个地方寻找包，然后导入包中名为module_name的模块。</p><p><strong>import os</strong></p><p>导入os模块，在python环境下对文件，文件夹执行操作的一个模块。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/15/categories/Deep_learning/pytorch+vs%20code%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/03/15/categories/Deep_learning/pytorch+vs%20code%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>下载CUDA，要有独立显卡。查看电脑显卡型号：MX250。</p><p>找到英伟达操作面板，查看自己电脑CUDA版本，为12.0.81。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/08/categories/Deep_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
      <url>/2023/02/08/categories/Deep_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习与深度学习入门"><a href="#机器学习与深度学习入门" class="headerlink" title="机器学习与深度学习入门"></a>机器学习与深度学习入门</h1><p><strong>机器学习</strong>：使用计算机设计系统，按照提供的训练数据和一定的方式来学习，随着训练次数的增加，提高性能，优化参数，达到预测相关问题输出的目的。</p><p><strong>有监督学习</strong>：训练的时候有标记label，label是连续值，如身高、价格，被称为<strong>回归</strong>，label是离散值，被称为<strong>分类</strong>；</p><p><strong>无监督学习</strong>；<strong>强化学习</strong></p><p><strong>python</strong>:面向对象，解释性语言。</p><p>​<strong>1.解释器</strong>：python 2.6&#x2F;3.6 ……</p><p>​<strong>2.package</strong>：</p><p>​numpy：拥有数据结构ndarray；</p><p>​pandas：拥有数据结构来存储表的数据；</p><p>​scipy       </p><p>​matplotlib：绘图；</p><p>​scikit-learn：机器学习；</p><p>​tensorflow(keras)&#x2F;pytorch， keras封装了tensorflow；</p><p>​pip：安装package的工具，解释器自带。</p><p>​<strong>3.IDE 集成开发环境：</strong></p><p>​Anaconda，第三方软件，自带相应版本解释器+常用包。</p><p>​Pycharm，关联解释器，比较方便惹。</p><p>SVD,奇异值分解</p><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><p>以预测房价数据为例，最后一列数据是房价y，前面列是房屋的各种属性x1,x2,x3 …</p><p><img src="/2023/02/08/categories/Deep_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/" alt="image-20230208140705062"></p><p>前面的每一列给定一个权重θ1,θ2…与属性特征相乘再相加，来预测最后列的房价数据。θ0为截距。</p><p>即y&#x3D;θ1·x1+θ2·x2+…+θ0。</p><p>设列向量<strong>θ</strong>&#x3D;（θ0,θ1,θ2…），列向量<strong>X</strong>&#x3D;（1,x1,x2…)，</p><p>对于第i行的数据（下图中，右上角一个i来表示），满足公式一：</p><p><img src="/2023/02/08/categories/Deep_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/" alt="image-20230208142022697"></p><p>ε表示预测值和真实值的误差，根据中心极限定理，它应该服从均值为0，方差为定值的高斯分布。</p><p>下图第一行我们写出ε的概率密度函数，第二行根据公式一将ε代换，第三行将所有值相乘得到θ的似然函数。</p><p><img src="/2023/02/08/categories/Deep_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/" alt="image-20230208142949559"></p><p>θ的似然函数不好求解，取对数化为加和的形式：</p><p><img src="/2023/02/08/categories/Deep_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/" alt="image-20230208143253303"></p><p>要使L(θ)最大，须取最后一行J(θ)的最小值。</p><p>对目标函数求梯度，再求驻点。</p><p><img src="/2023/02/08/categories/Deep_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/" alt="image-20230208143937949"></p><p><img src="/2023/02/08/categories/Deep_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/" alt="image-20230208144416261"></p><p><img src="/2023/02/08/categories/Deep_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/" alt="image-20230208145228355"></p><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><p>在线性回归基础上，加上激活函数，叫做逻辑回归，是二分类问题的首选算法。</p><h4 id="softmax回归"><a href="#softmax回归" class="headerlink" title="softmax回归"></a>softmax回归</h4><p>可以看做逻辑回归的推广，用作多分类回归。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>海飞丝</title>
      <link href="/2022/10/16/tags/poems/Head_and_Shoulders/"/>
      <url>/2022/10/16/tags/poems/Head_and_Shoulders/</url>
      
        <content type="html"><![CDATA[<p>蓝色的海飞丝</p><p>里面装着白色的墨汁</p><p>每用它一次</p><p>你就写了一首</p><p>头发的诗</p>]]></content>
      
      
      
        <tags>
            
            <tag> poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链路层</title>
      <link href="/2022/06/04/categories/Computer_Networks/5.link_layer/"/>
      <url>/2022/06/04/categories/Computer_Networks/5.link_layer/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络——自顶向下-笔记"><a href="#计算机网络——自顶向下-笔记" class="headerlink" title="计算机网络——自顶向下  笔记"></a>计算机网络——自顶向下  笔记</h1><h2 id="5-链路层"><a href="#5-链路层" class="headerlink" title="5. 链路层"></a>5. 链路层</h2><h3 id="5-1-链路层概述"><a href="#5-1-链路层概述" class="headerlink" title="5.1 链路层概述"></a>5.1 链路层概述</h3><p>我们把主机和路由器称作结点，连接沿通信路径的相邻节点的路径是<strong>链路</strong>。链路层的分组叫做帧，地址是MAC地址。</p><p>使用不同的链路协议经不同的链路传输数据报，例如第一段链路是以太网，中间链路是帧中继，最后链路是 802.11，每个链路协议提供不同的服务。</p><p>链路层可能提供的服务还包括：</p><p><strong>可靠交付</strong>：一般由确认和重传实现，通常用于高差错率的链路（如无线链路，光纤的差错低）；</p><p><strong>差错检验和纠正</strong>：发送方在帧中包括差错检验比特，接收方检验后，如果出现较少差错可以进行纠正而避免重传。</p><p>链路层的主体部分是在网络适配器实现的，网络适配器核心的链路层控制器实现了多种链路层服务。</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220603165152084.png"></p><pr><h3 id="5-2-差错检测和纠正"><a href="#5-2-差错检测和纠正" class="headerlink" title="5.2 差错检测和纠正"></a>5.2 差错检测和纠正</h3><p>在发送方采用差错检测和纠正比特来增强数据。</p><p>差错检测的3种技术：奇偶校验、检验和、循环冗余检测。</p><h4 id="5-2-1-奇偶校验"><a href="#5-2-1-奇偶校验" class="headerlink" title="5.2.1 奇偶校验"></a>5.2.1 奇偶校验</h4><p>专门设置一个奇偶校验位，用它使这组代码中“1”的个数为奇数或偶数。 </p><p>如果采用单比特奇偶校验，只能检测单个比特差错：</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220603165750695.png"></p><p>如果采用二维比特奇偶校验，可以检测和纠正单个比特差错：</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220603165820294.png"></p><p>接收方检测和纠错的能力被称为<strong>前向纠错</strong>，它可以减少重传次数和避免往返时延（发送方收到NAK后重传产生的）。</p><pr><h4 id="5-2-2-检验和"><a href="#5-2-2-检验和" class="headerlink" title="5.2.2 检验和"></a>5.2.2 检验和</h4><p>将数据内容作为16比特的整数序列，对它们的和进行反码运算，求和时遇到的溢出都被回卷。</p><pr><h4 id="5-2-3-循环冗余检测"><a href="#5-2-3-循环冗余检测" class="headerlink" title="5.2.3 循环冗余检测"></a>5.2.3 循环冗余检测</h4><p>即CRC编码，多项式编码，将比特串看做系数是0和1的多项式。</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220604134022533.png"></p><p>发送方和接收方先协商一个r+1的生成多项式G，要求G的最左边是1，</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220604134155028.png"></p><p>发送方用位串D及 G(x)进行某种运算得到校验和R，并在帧的末尾加上校验和，使带校验和的帧的多项式(D+R)能被 G(x) 整除，接收方收到后，用 G(x) 除多项式，若有余数则传输有错。</p><p>多项式D+R&#x3D;D*2^r XOR R&#x3D;nG，等价为R&#x3D;(D*2^R)&#x2F;G的余数。</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220604135016515.png"></p><pr><h3 id="5-3-多路访问协议"><a href="#5-3-多路访问协议" class="headerlink" title="5.3 多路访问协议"></a>5.3 多路访问协议</h3><p><strong>点对点链路</strong>：链路一端的单个发送方和链路另一端的单个接收方组成。点对点协议和高级数据链路控制都是这样的协议；</p><p><strong>广播链路</strong>：多个发送和接收节点都连接到相同、单一、共享的信道上。以太网和无线局域网是广播链路层技术的例子。</p><p><strong>多路访问协议</strong>就是如何协调多个发送和接收结点对一个共享广播信道的访问，规范在共享广播信道上的传输行为。</p><p><strong>碰撞</strong>：结点同时接收到多个帧，没有任何结点有效获得了信号。</p><p>理想的多路访问协议：</p><p>（1）当一个节点要传输，它能够以速率R发送；</p><p>（2）当M节点要传输，每个能以平均速率R&#x2F;M发送；</p><p>（3） 全分散:无特殊节点来协调传输；无同步时钟、时隙；</p><p>（4） 实现简单。</p><h4 id="5-3-1-信道划分协议"><a href="#5-3-1-信道划分协议" class="headerlink" title="5.3.1 信道划分协议"></a>5.3.1 信道划分协议</h4><p>TDMA和FDMA，时分复用访问和频分复用访问。</p><p><strong>TDM</strong>将时间划分为时间帧，将时间帧划分为N个时隙，把每个时隙分配给N个结点中的一个。在循环的TDM帧中，被指派的时隙把分组传输给相应结点。</p><p>缺点：出现不使用的时隙空闲。</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220604140321968.png"></p><p><strong>FDMA</strong>将信道频谱划分为频带，每个结点分配固定的频带。</p><p>缺点：频带中未使用的传输时间空闲。</p><pr><h4 id="5-3-2-随机接入协议"><a href="#5-3-2-随机接入协议" class="headerlink" title="5.3.2 随机接入协议"></a>5.3.2 随机接入协议</h4><p>一个结点全速发送，出现碰撞时，涉及碰撞的结点独立等待一个随机时延，然后重发该帧，直到无碰撞地通过。</p><h5 id="5-3-2-1-时隙ALOHA"><a href="#5-3-2-1-时隙ALOHA" class="headerlink" title="5.3.2.1 时隙ALOHA"></a>5.3.2.1 时隙ALOHA</h5><h5 id="5-3-2-2-ALOHA"><a href="#5-3-2-2-ALOHA" class="headerlink" title="5.3.2.2 ALOHA"></a>5.3.2.2 ALOHA</h5><h5 id="5-3-2-3-CSMA-载波侦听多路访问"><a href="#5-3-2-3-CSMA-载波侦听多路访问" class="headerlink" title="5.3.2.3  CSMA(载波侦听多路访问)"></a>5.3.2.3  CSMA(载波侦听多路访问)</h5><h5 id="5-3-2-4-CSMA-x2F-CD-具有碰撞检测的载波侦听多路访问"><a href="#5-3-2-4-CSMA-x2F-CD-具有碰撞检测的载波侦听多路访问" class="headerlink" title="5.3.2.4  CSMA&#x2F;CD(具有碰撞检测的载波侦听多路访问)"></a>5.3.2.4  CSMA&#x2F;CD(具有碰撞检测的载波侦听多路访问)</h5><pr><h4 id="5-3-3-轮流协议"><a href="#5-3-3-轮流协议" class="headerlink" title="5.3.3 轮流协议"></a>5.3.3 轮流协议</h4><pr><h3 id="5-4-链路层编址"><a href="#5-4-链路层编址" class="headerlink" title="5.4 链路层编址"></a>5.4 链路层编址</h3><p>主机和路由器的网络接口具有MAC地址，高层程序仅希望与IP地址交往，地址解析协议负责在MAC地址和IP地址之间转换。</p><p><strong>在同一个局域网</strong>中，发送主机的ARP适配器模块会根据输入的IP地址返回MAC地址。ARP表包含了对某些LAN节点的IP&#x2F;MAC地址映射  &lt; IP地址; MAC地址; TTL&gt;。</p><p>如果B的MAC地址不在A的ARP表中，A广播ARP请求分组, 包含B的IP地址，目的MAC地址 &#x3D; FF-FF-FF-FF-FF-FF，在LAN上的所有机器接收ARP请求。B接收到ARP分组，用它的MAC地址单播回答A。</p><p>发送数据报<strong>到另一个局域网</strong>，在两个局域网相连的路由器中有两个ARP表, 每张表对应一个IP网络。</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220604142812799.png"></p><pr><h3 id="5-5-以太网"><a href="#5-5-以太网" class="headerlink" title="5.5 以太网"></a>5.5 以太网</h3><p>以太网是如今最流行的有线局域网技术。</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220604143401641.png"></p><p>Preamble前同步码前7个字节都是10101010 ，后1个字节为是10101011，用于同步接收方、发送方的时钟速率。</p><p>类型指示了更高层的协议。</p><p>以太网使用了<strong>CSMA&#x2F;CD协议</strong>：</p><p>（1）载波侦听：先听再说。适配器在发送前监听总线是否空闲，总线空闲则发送数据，不空闲则继续监听；</p><p>（2）冲突检测：边说边听。数据在发送的同时保持对总线的监听，发现冲突则停止发送；</p><p>（3）随机延迟后重发。冲突发生后，采用指数回退方法等待一段随机时间后，再进行监听和发送。</p><pr><h3 id="5-6-链路层交换机"><a href="#5-6-链路层交换机" class="headerlink" title="5.6 链路层交换机"></a>5.6 链路层交换机</h3><p><strong>集线器</strong>基本上是物理层中继器 ，它没有缓存，来自一条链路的比特从其他所有链路出去。主干集线器互联LAN网段，扩展节点之间的最大距离。</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220604144019063.png"></p><p><strong>以太网交换机</strong>实际是一个基于网桥技术的多端口工作在链路层的网络设备，它为数据帧从一个端口到另一个任意端口的转发提供了低时延、低开销的通路。特点是即插即用，自学习与线速转发。</p><p><img src="/2022/06/04/categories/Computer_Networks/5.link_layer/image-20220604144155287.png"></p><p><strong>自学习</strong>：一个交换机具有一个交换机表（转发表），表项: &lt;MAC地址, 接口, 时戳&gt;。交换机学习通过哪个接口能够到达哪台主机。</p><p><strong>流量隔离</strong>：交换机将子网分割成局域网段，过滤分组，相同局域网的帧通常不在其他LAN段上转发。</p><p><strong>交换机和路由器的比较</strong></p></pr></pr></pr></pr></pr></pr></pr></pr></pr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络层</title>
      <link href="/2022/06/02/categories/Computer_Networks/4.network%20_ayer/"/>
      <url>/2022/06/02/categories/Computer_Networks/4.network%20_ayer/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络——自顶向下-笔记"><a href="#计算机网络——自顶向下-笔记" class="headerlink" title="计算机网络——自顶向下  笔记"></a>计算机网络——自顶向下  笔记</h1><h2 id="4-网络层"><a href="#4-网络层" class="headerlink" title="4.网络层"></a>4.网络层</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>网络层提供尽力而为的服务。</p><p>路由器的功能：</p><p>（1）转发：将分组从路由器的输入移动到适当的路由器输出；</p><p>（2）路由：决定分组从源到目的地所采用的路径；</p><p>（3）连接建立。</p><pr><h3 id="4-3-路由器工作原理"><a href="#4-3-路由器工作原理" class="headerlink" title="4.3 路由器工作原理"></a>4.3 路由器工作原理</h3><p>路由器的功能：运行路由算法以得到转发表；根据转发表对IP分组进行转发；提供多种网络类型接口，完成不同网络的互联</p><p>路由器的结构：输入、输出端口；交换结构；选路处理器</p><p><img src="/2022/06/02/categories/Computer_Networks/4.network%20_ayer/image-20220601162636119.png"></p><p>数据链路层处理模块剥去帧首部和尾部后，将分组送到网络层的队列中排队等待处理。这会产生一定的时延。在输入端口，路由器使用转发表查找输出端口。</p><p>在输出端口，交换结构传送过来的分组先进行缓存。数据链路层处理模块将分组加上链路层的首部和尾部，交给物理层后发送到外部线路。</p><p>随着输入、输出端口排队队列的增长，耗尽路由器的缓存空间，就会出现<strong>丢包</strong>。</p><pr><h3 id="4-4-网际协议"><a href="#4-4-网际协议" class="headerlink" title="4.4 网际协议"></a>4.4 网际协议</h3><h4 id="4-4-1-IP数据报格式"><a href="#4-4-1-IP数据报格式" class="headerlink" title="4.4.1 IP数据报格式"></a>4.4.1 IP数据报格式</h4><p><img src="/2022/06/02/categories/Computer_Networks/4.network%20_ayer/image-20220601163607796.png"></p><p><strong>标识、标志和片偏移</strong>与IP分片有关；</p><p><strong>分片</strong>：因为MTU的限制，一个大数据报在传输中被分成一片一片的。标识可以理解为是数据报的编号，而标志是最后一片为0，其它为1，片偏移指示了该片应该放在原始数据报中的位置（单位为字节，且是8的倍数）；</p><p><strong>总长度</strong>是整个数据包的长度，不能超过MTU</p><p><strong>协议</strong>号表明了这个数据报应交给那个运输层协议。6为TCP，17为UDP。</p><pr><h4 id="4-4-2-IPv4编址"><a href="#4-4-2-IPv4编址" class="headerlink" title="4.4.2 IPv4编址"></a>4.4.2 IPv4编址</h4><p>IP地址：对主机、路由器接口的32-bit 标识符 </p><p><img src="/2022/06/02/categories/Computer_Networks/4.network%20_ayer/image-20220601165405736.png"></p><p><strong>子网</strong>：路由器的一个接口连接的一个网络就可以理解为一个子网。子网可以由子网掩码和前缀&#x2F;长度表示。</p><p>子网掩码：255.255.255.0；</p><p>前缀&#x2F;长度：223.1.1.0&#x2F;24；</p><p><strong>分类编址</strong>：具有8、16、24字节子网地址的子网被称为A、B、C类网络。但是有大的太大，小的不够用的问题。</p><p><strong>无类别域间路由选择</strong>的地址块描述的例子：</p><p>某地址块为200.23.16.0&#x2F;23，则其</p><p>子网掩码为：255.255.254.0  或  &#x2F;23；</p><p>网络地址为：200.23.16.0 (主机比特全0)；</p><p>可用主机地址为：200.23.16.1~200.23.17.254；</p><p>广播地址为：200.23.17.255 (主机比特全1)。</p><p>如何获取IP地址？</p><p>（1）管理员配置静态地址；</p><p>（2）DHCP</p><p>主机要发送DHCP发现报文发现DHCP服务器，使用广播目的地址255.255.255.255，源地址0.0.0.0；</p><p>DHCP收到发现报文后响应DHCP提供报文，使用广播目的地址255.255.255.255；</p><p>客户机选择一个DHCP服务器，发送一个DHCP请求报文，回显配置参数；</p><p>服务器用DHCP ACK确认。</p><p>（3）NAT</p><p>NAT路由器将内网IP地址通过NAT转换表转换为面对外网的地址。</p><pr><h4 id="4-4-3-因特网控制报文协议"><a href="#4-4-3-因特网控制报文协议" class="headerlink" title="4.4.3 因特网控制报文协议"></a>4.4.3 因特网控制报文协议</h4><p>IP网络是尽力而为（不可靠）的，ICMP通过差错报文和询问报文（Ping，回声请求&#x2F;回答）来辅助IP网络的功能。</p><p>ICMP被承载在IP数据报分组中，所以应该是位于IP上层结构的。</p><p><img src="/2022/06/02/categories/Computer_Networks/4.network%20_ayer/image-20220601184655745.png"></p><p>Traceout就是由ICMP实现的。源主机发送一系列携带不可达UDP端口号的UDP报文段的数据报，TTL分别为1、2、3……同时启动定时器，当第n个数据报到达第n台路由器时，这个数据报正好过期，路由器丢弃该数据报并发送一个ICMP报警报文给源主机，就能得知第n台路由器的名字、IP和往返时延。</p><pr><h4 id="4-4-4-IPv6"><a href="#4-4-4-IPv6" class="headerlink" title="4.4.4 IPv6"></a>4.4.4 IPv6</h4><pr><h3 id="4-5-路由选择算法"><a href="#4-5-路由选择算法" class="headerlink" title="4.5 路由选择算法"></a>4.5 路由选择算法</h3><p>源主机直接连接的路由器称为源路由器，目的主机直接连接的路由器成为目的路由器，将主机间的路由选择问题归结为源路由器到目的路由器的路由选择问题。</p><p><strong>分类</strong>：全局的和分散的、静态的和动态的。</p><h4 id="4-5-1-链路状态算法"><a href="#4-5-1-链路状态算法" class="headerlink" title="4.5.1 链路状态算法"></a>4.5.1 链路状态算法</h4><p>是全局的算法，经“链路状态广播”，所有路由器具有完全的拓扑、链路费用信息。</p><p><strong>定义：</strong></p><p>C(x,y): 从节点x到y的链路费用，如果不是直接邻居就是∞；</p><p>D(v):从源到目的地v路径费用的当前值；</p><p>p(v): 从源到v沿路径的前任节点；</p><p>N‘: 已知在最小费用路径中的节点集合。</p><p><img src="/2022/06/02/categories/Computer_Networks/4.network%20_ayer/image-20220601185640945.png"></p><p>时间复杂度：每次迭代:需要检查所有 不在N中的节点，n(n+1)&#x2F;2 ~O(n2)。</p><p>缺点：震荡现象。</p><pr><h4 id="4-5-2-距离向量算法"><a href="#4-5-2-距离向量算法" class="headerlink" title="4.5.2 距离向量算法"></a>4.5.2 距离向量算法</h4><p>迭代、异步、分布式的动态规划算法，不是全局的，只需要知道邻居的信息。</p><p><strong>定义</strong>：dx(y) 是从x到y最低费用路径的费用。</p><p>有dx(y) &#x3D; min {c(x,v) + dv(y) }。</p><p><img src="/2022/06/02/categories/Computer_Networks/4.network%20_ayer/image-20220601190319580.png">每个节点周期性的发送它自己的距离向量到其邻居，然后邻居更新距离向量。</p><pr><h4 id="4-5-3-层次路由选择"><a href="#4-5-3-层次路由选择" class="headerlink" title="4.5.3 层次路由选择"></a>4.5.3 层次路由选择</h4><p>在同一<strong>自治系统</strong>AS中，路由器执行相同的路由选择算法，即<strong>自治系统内部路由选择协议</strong>。不同AS互联处的路由器叫做网关路由器，它们之间使用<strong>自治系统间路由选择协议</strong>。</p><pr><h3 id="4-6-因特网中的路由选择"><a href="#4-6-因特网中的路由选择" class="headerlink" title="4.6 因特网中的路由选择"></a>4.6 因特网中的路由选择</h3><h4 id="4-6-1-自治系统内部路由选择：RIP"><a href="#4-6-1-自治系统内部路由选择：RIP" class="headerlink" title="4.6.1 自治系统内部路由选择：RIP"></a>4.6.1 自治系统内部路由选择：RIP</h4><p>RIP是一种距离向量协议，使用跳数作为费用测度，每条链路为1，最大费用限制在15。</p><p>邻居间用RIP响应报文，大概30秒交换一次自己的路由表信息。</p><p>优点：实现简单、开销小。</p><p>缺点：受到网络规模限制，最大费用为15，并且交换的路由表信息太大增加开销；当网络出现故障时，要经过长时间才能将此信息传送到所有的路由器。</p><pr><h4 id="4-6-2-自治系统内部路由选择：OSPF"><a href="#4-6-2-自治系统内部路由选择：OSPF" class="headerlink" title="4.6.2 自治系统内部路由选择：OSPF"></a>4.6.2 自治系统内部路由选择：OSPF</h4><p>使用洪泛链路状态信息的链路状态协议和Dijkstra路径算法。</p><p>状态变化或周期性广播链路状态信息。</p><pr><h4 id="4-6-3-自治系统间路由选择：BGP"><a href="#4-6-3-自治系统间路由选择：BGP" class="headerlink" title="4.6.3 自治系统间路由选择：BGP"></a>4.6.3 自治系统间路由选择：BGP</h4><pr><h3 id="4-7-广播和多播路由选择"><a href="#4-7-广播和多播路由选择" class="headerlink" title="4.7 广播和多播路由选择"></a>4.7 广播和多播路由选择</h3><h4 id="4-7-1-广播"><a href="#4-7-1-广播" class="headerlink" title="4.7.1 广播"></a>4.7.1 广播</h4><pr><h4 id="4-7-2-多播"><a href="#4-7-2-多播" class="headerlink" title="4.7.2 多播"></a>4.7.2 多播</h4><pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>名侦探柯南剧情梳理</title>
      <link href="/2022/05/30/tags/sort-out/%E5%90%8D%E4%BE%A6%E6%8E%A2%E6%9F%AF%E5%8D%97/"/>
      <url>/2022/05/30/tags/sort-out/%E5%90%8D%E4%BE%A6%E6%8E%A2%E6%9F%AF%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><strong>前文总结</strong></p><p><strong>水无怜奈</strong>的父亲伊森本堂是CIA在黑的卧底，被琴酒处决，水无为父亲继承卧底事业。</p><p>因为意外车祸被FBI抓获，一直在医院。这时弟弟本堂瑛佑出场打探姐姐消息。</p><p>水无卧底身份曝光，和秀一、柯南研究假死计谋，重回组织卧底。并接连传出消息，波本（为调查志保）、朗姆（我认为主要是为调查小五郎）出动。</p><p><strong>宫野志保</strong>的父亲<strong>宫野厚司</strong>是阿笠博士的老友。</p><p>宫野厚司30年前加入白鸠制药，结实艾莲娜，随后白鸠制药破产，回到老家开诊所，最后进入乌丸集团研发出APTX-4869，并于17前在一场火灾中去世。</p><p>（宫野）艾莲娜和（赤井）玛丽是姐妹。</p><p><strong>赤井秀一</strong>为打入组织内部，化名诸星大与宫野明美恋爱。</p><p>期间被波本误会杀死了波本朋友诸伏景光。</p><p>伏特加失误后（接头时被伪装成老人的组织成员识破）暴露了秀一的卧底身份。</p><p>水无怜奈篇后，秀一假死，化为冲矢昴，入住秀一家，暗中保护灰原。</p><p><strong>伦敦篇</strong>（网球那里）</p><p>因为赤井玛丽被贝姐喂药变小，<strong>世良真纯</strong>注意到柯南变大破案的比赛直播，因为柯南号称“福尔摩斯弟子”，世良想起了多年前沙滩遇到的那位“福尔摩斯弟子”，因此转入小兰班级暗中调查。</p><p><strong>红黑快车篇</strong></p><p>和基德联手设计雪莉假死，打消贝尔摩德疑虑，同时观众得知<strong>安室透</strong>的波本身份。</p><p>波本目击柯南麻醉小五郎。</p><p><strong>绯色篇</strong></p><p>安室透和秀一当面对峙景光之死，两人身份揭开。</p><p>现在灰原发现了秀一，秀一、世良识破了柯南身份，柯南确定赤井家族关系，赤井务武在17年前给家人发送短信后失踪，赤井玛丽被灌下APTX4869后变小。</p><p><strong>1090-1092 太阁名人的将棋盘</strong></p><p>柯南早已得知赤井三兄妹身份，并在<strong>大冈红叶篇</strong>从服部的调查中初次得知秀吉是已死羽田浩司的义弟（这一点外界并不知道）。</p><p>得知羽田浩司是有钱人家的孩子。</p><p>秀吉和秀一不知道玛丽变小了，玛丽和世良不知道秀一还活着。</p><p><strong>警校五人组篇</strong></p><p><strong>松田阵平</strong>的父亲是被冤枉的拳手，数年后平反，松田怀着要打当时的警察一拳为父亲报仇的目的进入警校学习；</p><p><strong>伊达航</strong>（大班长）的女友娜塔莉和降谷零一样是金发，所以在别人恶意根据零的外表随意评判的时候会为他打抱不平。航的父亲原是派出所巡视长，但是身体瘦弱，在航小时候父亲和他在便利店遇到歹徒抢劫，在儿子面前却没有挺身而出，反而下跪求饶被暴打，受伤辞职。后来在五人组便利店篇与父亲误会解除；</p><p><strong>荻原研二</strong>很受女生欢迎，他的父亲经营汽车修理厂，却因为经济不景气倒闭了。喜欢汽车，为了救人把FD（佐藤父亲送佐藤的车）搞坏，与佐藤结缘。最后和松田进入机动拆弹爆破组；</p><p><strong>诸伏景光</strong>儿时在家中（躲在柜子里）目击父母被父母的熟人杀死，嫌疑人肩膀有“杯子”状纹身，犯罪后在房间里呼叫一个小女孩（景光的幼时玩伴）的名字。</p><p><strong>1110-1111 坠落于牧场的火种</strong></p><p>若狭留美身上揣着将棋，被安室透发现。同时在地下室安室被若狭打晕。</p>]]></content>
      
      
      
        <tags>
            
            <tag> sort-out </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络课程实验四,Ethernet and ARP</title>
      <link href="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/"/>
      <url>/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络课程实验四：Ethernet-and-ARP"><a href="#计算机网络课程实验四：Ethernet-and-ARP" class="headerlink" title="计算机网络课程实验四：Ethernet and ARP"></a><strong>计算机网络课程实验四：</strong>Ethernet and ARP</h1><p>下载实验数据包：<a href="http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip">http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip</a></p><p>下载实验题目综述：<a href="http://www-net.cs.umass.edu/wireshark-labs/Wireshark_Ethernet_ARP_v7.0.pdf">http://www-net.cs.umass.edu/wireshark-labs/Wireshark_Ethernet_ARP_v7.0.pdf</a></p><h3 id="捕获和分析以太网帧"><a href="#捕获和分析以太网帧" class="headerlink" title="捕获和分析以太网帧"></a>捕获和分析以太网帧</h3><p>这里选择直接解压文件包，用wireshark打开ethernet–ethereal-trace-1。</p><p><strong>选择包含HTTP GET消息的以太网帧，在报文详细信息窗口中展开Ethernet II信息。</strong></p><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511124641636.png"></p><h4 id="1-电脑的48位以太网地址是多少？"><a href="#1-电脑的48位以太网地址是多少？" class="headerlink" title="1.电脑的48位以太网地址是多少？"></a>1.电脑的48位以太网地址是多少？</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511124825718.png"></p><p>源地址就是电脑的以太网地址：0x00 d0 59 a9 3d 68。</p><pr><h4 id="2-以太网帧的48位目的地址是什么-这是gaia-cs-umass-edu的以太网地址吗？什么设备的以太网地址是这个"><a href="#2-以太网帧的48位目的地址是什么-这是gaia-cs-umass-edu的以太网地址吗？什么设备的以太网地址是这个" class="headerlink" title="2.以太网帧的48位目的地址是什么?这是gaia.cs.umass.edu的以太网地址吗？什么设备的以太网地址是这个?"></a>2.以太网帧的48位目的地址是什么?这是gaia.cs.umass.edu的以太网地址吗？什么设备的以太网地址是这个?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511125038268.png"></p><p>目的地址是：0x00 06 25 da af 73。</p><p>这个地址并非gaia.cs.umass.edu的以太网地址，而是是路由器接口的MA地址。</p><pr><h4 id="3-Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么"><a href="#3-Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么" class="headerlink" title="3.Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么?"></a>3.Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511125433348.png"></p><p>0x0800对应的上层协议是IPV4。</p><pr><h4 id="4-从以太网帧的最开始算起，到“GET”中的ASCII码“G”，一共出现了多少个字节"><a href="#4-从以太网帧的最开始算起，到“GET”中的ASCII码“G”，一共出现了多少个字节" class="headerlink" title="4.从以太网帧的最开始算起，到“GET”中的ASCII码“G”，一共出现了多少个字节?"></a>4.从以太网帧的最开始算起，到“GET”中的ASCII码“G”，一共出现了多少个字节?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511125628474.png"></p><p>如图，第55个字节0x47是“G”，它的前面一共有54个字节。</p><pr><p><strong>接下来，根据包含HTTP响应消息的第一个字节的以太网帧的内容回答以下问题。</strong></p><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511130008016.png"></p><pr><h4 id="5-以太网源地址的值是多少-这是您的计算机地址，还是gaa-cs-umass-edu的地址？什么设备的以太网地址是这个"><a href="#5-以太网源地址的值是多少-这是您的计算机地址，还是gaa-cs-umass-edu的地址？什么设备的以太网地址是这个" class="headerlink" title="5.以太网源地址的值是多少?这是您的计算机地址，还是gaa.cs .umass.edu的地址？什么设备的以太网地址是这个?"></a>5.以太网源地址的值是多少?这是您的计算机地址，还是gaa.cs .umass.edu的地址？什么设备的以太网地址是这个?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511130056987.png"></p><p>源地址是0x00 06 25 da af 73。这个地址和第二问同样是是路由器的接口MAC地址。</p><pr><h4 id="6-以太网帧中的目的地址是什么-这是你电脑的以太网地址吗"><a href="#6-以太网帧中的目的地址是什么-这是你电脑的以太网地址吗" class="headerlink" title="6.以太网帧中的目的地址是什么?这是你电脑的以太网地址吗?"></a>6.以太网帧中的目的地址是什么?这是你电脑的以太网地址吗?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511130248462.png"></p><p>目的地址是：0x00 d0 59 a9 3d 68。这就是电脑主机的以太网地址。</p><pr><h4 id="7-Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么"><a href="#7-Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么" class="headerlink" title="7.Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么?"></a>7.Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511130520278.png"></p><p>同样是IPV4。</p><pr><h4 id="8-从以太网帧的最开始算起，到“OK”中的ASCII码“O”，一共出现了多少个字节"><a href="#8-从以太网帧的最开始算起，到“OK”中的ASCII码“O”，一共出现了多少个字节" class="headerlink" title="8.从以太网帧的最开始算起，到“OK”中的ASCII码“O”，一共出现了多少个字节?"></a>8.从以太网帧的最开始算起，到“OK”中的ASCII码“O”，一共出现了多少个字节?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511131915878.png"></p><p>前面的到tcp报头为止，一共54个字节。</p><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511131536769.png"></p><p>HTTP报文中O是第14个字节。那么从最开始算起，O出现在第68个字节处。</p><pr><h3 id="ARP-地址解析协议"><a href="#ARP-地址解析协议" class="headerlink" title="ARP 地址解析协议"></a>ARP 地址解析协议</h3><p>查看ARP命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\windows\system32\arp</span><br></pre></td></tr></table></figure><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511132407101.png"></p><pr><h4 id="9-写下你电脑的ARP缓存的内容。每个列值的含义是什么"><a href="#9-写下你电脑的ARP缓存的内容。每个列值的含义是什么" class="headerlink" title="9.写下你电脑的ARP缓存的内容。每个列值的含义是什么?"></a>9.写下你电脑的ARP缓存的内容。每个列值的含义是什么?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511132629079.png">**</p><p>分别表示IP地)、MAC地址和类型。类型分为静态和动态，动态表示若是某个表项在必定的时间内没有被用到就被删除，静态则永久保存。</p><pr><p><strong>为了观察计算机发送和接收 ARP消息，要清除 ARP缓存，防止在其缓存中找到所需的 IP-Ethernet地址转换关系而不会发送 ARP 消息。</strong></p><p>清除浏览器的缓存后，启动 Wireshark捕捉。打开URL：<a href="http://gaia.cs.umass.edu/wireshark-labs/HTTP-ethereal-lab-file3.html%E3%80%82">http://gaia.cs.umass.edu/wireshark-labs/HTTP-ethereal-lab-file3.html。</a></p><h4 id="10-包含ARP请求消息的以太网帧的源地址和目的地址的十六进制值是多少"><a href="#10-包含ARP请求消息的以太网帧的源地址和目的地址的十六进制值是多少" class="headerlink" title="10.包含ARP请求消息的以太网帧的源地址和目的地址的十六进制值是多少?"></a>10.包含ARP请求消息的以太网帧的源地址和目的地址的十六进制值是多少?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511134141521.png"></p><p>源地址是0x00 d0 59 a9 3d 68；</p><p>目的地址是0xff ff ff ff ff ff。</p><pr><h4 id="11-Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么"><a href="#11-Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么" class="headerlink" title="11.Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么?"></a>11.Frame的类型字段的两个字节的十六进制值，它对应的上层协议是什么?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511134311355.png"></p><p>类型是ARP，0x0806。</p><pr><h4 id="12-从-ftp-ftp-rfc-editor-org-in-notes-std-std37-txt下载ARP报文格式规范。分析："><a href="#12-从-ftp-ftp-rfc-editor-org-in-notes-std-std37-txt下载ARP报文格式规范。分析：" class="headerlink" title="12.从 ftp://ftp.rfc-editor.org/in-notes/std/std37.txt下载ARP报文格式规范。分析："></a>12.从 <a href="ftp://ftp.rfc-editor.org/in-notes/std/std37.txt%E4%B8%8B%E8%BD%BDARP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E3%80%82%E5%88%86%E6%9E%90%EF%BC%9A">ftp://ftp.rfc-editor.org/in-notes/std/std37.txt下载ARP报文格式规范。分析：</a></h4><h5 id="1）从以太网帧的最开始ARP操作码字段开始的字节数是多少"><a href="#1）从以太网帧的最开始ARP操作码字段开始的字节数是多少" class="headerlink" title="(1）从以太网帧的最开始ARP操作码字段开始的字节数是多少?"></a>(1）从以太网帧的最开始ARP操作码字段开始的字节数是多少?</h5><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511134940944.png"></p><p>如图，21个字节。</p><pr><h5 id="2-发出ARP请求的以太网帧的ARP-payload部分的操作码字段值是多少"><a href="#2-发出ARP请求的以太网帧的ARP-payload部分的操作码字段值是多少" class="headerlink" title="(2)发出ARP请求的以太网帧的ARP-payload部分的操作码字段值是多少?"></a>(2)发出ARP请求的以太网帧的ARP-payload部分的操作码字段值是多少?</h5><p>如上图，操作码Opcode为0x00 01。</p><pr><h5 id="3-ARP消息中是否包含发送者的IP地址"><a href="#3-ARP消息中是否包含发送者的IP地址" class="headerlink" title="(3)ARP消息中是否包含发送者的IP地址?"></a>(3)ARP消息中是否包含发送者的IP地址?</h5><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511135138668.png"></p><p>如图，包含的发送者IP地址是0x00 d0 59 a9 3d 68。</p><pr><h5 id="4-从哪里查询相应-IP-的以太网地址"><a href="#4-从哪里查询相应-IP-的以太网地址" class="headerlink" title="(4)从哪里查询相应 IP 的以太网地址?"></a>(4)<strong>从哪里查询相应 IP 的以太网地址</strong>?</h5><p>操作码为0x00 01，是request，表示ARP请求，即查询响应IP的以太网地址。</p><pr><h4 id="13-查找响应ARP请求而发送的ARP应答。"><a href="#13-查找响应ARP请求而发送的ARP应答。" class="headerlink" title="13.查找响应ARP请求而发送的ARP应答。"></a>13.查找响应ARP请求而发送的ARP应答。</h4><h5 id="（1）从以太网帧的最开始ARP操作码字段开始的字节数是多少"><a href="#（1）从以太网帧的最开始ARP操作码字段开始的字节数是多少" class="headerlink" title="（1）从以太网帧的最开始ARP操作码字段开始的字节数是多少?"></a>（1）从以太网帧的最开始ARP操作码字段开始的字节数是多少?</h5><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511135629074.png"></p><p>如图，第21个字节</p><pr><h5 id="（2）ARP响应的以太网帧的ARP-payload部分的操作码字段值是多少"><a href="#（2）ARP响应的以太网帧的ARP-payload部分的操作码字段值是多少" class="headerlink" title="（2）ARP响应的以太网帧的ARP-payload部分的操作码字段值是多少?"></a>（2）ARP响应的以太网帧的ARP-payload部分的操作码字段值是多少?</h5><p>同样地，操作码字段0x00 02，表示reply。</p><pr><h5 id="（3）-在响应-ARP-中从哪里看出现-ARP-请求的答案"><a href="#（3）-在响应-ARP-中从哪里看出现-ARP-请求的答案" class="headerlink" title="（3） 在响应 ARP 中从哪里看出现 ARP 请求的答案?"></a>（3） <strong>在响应 ARP 中从哪里看出现 ARP 请求的答案?</strong></h5><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511135858725.png"></p><pr><h4 id="14-包含ARP应答消息的以太网帧的源地址和目的地址的十六进制值是什么"><a href="#14-包含ARP应答消息的以太网帧的源地址和目的地址的十六进制值是什么" class="headerlink" title="14.包含ARP应答消息的以太网帧的源地址和目的地址的十六进制值是什么?"></a>14.包含ARP应答消息的以太网帧的源地址和目的地址的十六进制值是什么?</h4><p><img src="/2022/05/11/categories/Computer_Networks/Computer_networks_course_lab4_Ethernet%20and%20ARP/image-20220511140014351.png"></p><p>源地址：0x00 06 25 da af 91;</p><p>目的地址：0x00 d0 59 a9 3d 68。</p><pr><h4 id="15-如果在一台计算机发送ARP请求和应答的网络上，还有另一台计算机发送了另一个ARP请求，为什么在报文跟踪中没有ARP应答？"><a href="#15-如果在一台计算机发送ARP请求和应答的网络上，还有另一台计算机发送了另一个ARP请求，为什么在报文跟踪中没有ARP应答？" class="headerlink" title="15.如果在一台计算机发送ARP请求和应答的网络上，还有另一台计算机发送了另一个ARP请求，为什么在报文跟踪中没有ARP应答？"></a>15.如果在一台计算机发送ARP请求和应答的网络上，还有另一台计算机发送了另一个ARP请求，为什么在报文跟踪中没有ARP应答？</h4><p>因为ARP查询是广播的，全部该网段内的电脑都能收到。但是 ARP 广播回复是单播的，只有请求的那台电脑才能收到，所以抓不到另一台电脑的 ARP 请求。</p></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络课程实验三,NET</title>
      <link href="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/"/>
      <url>/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络课程实验三：NET"><a href="#计算机网络课程实验三：NET" class="headerlink" title="计算机网络课程实验三：NET"></a><strong>计算机网络课程实验三：NET</strong></h1><p>下载实验数据包：<a href="http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip">http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces.zip</a></p><p>下载实验题目综述：<a href="https://www-net.cs.umass.edu/wireshark-labs/Wireshark_NAT_v7.0.pdf">https://www-net.cs.umass.edu/wireshark-labs/Wireshark_NAT_v7.0.pdf</a></p><h4 id="1-客户端的IP地址是什么"><a href="#1-客户端的IP地址是什么" class="headerlink" title="1.   客户端的IP地址是什么?"></a><strong>1.</strong>   <strong>客户端的IP地址是什么?</strong></h4><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140045000.png"></p><p>从TCP连接的第一次握手的源IP地址就可以看出是192.168.1.100，从第二次握手的目的IP也可以看出。这里给出第二次握手的IP协议截图中高亮行Dst：192.168.1.100也说明了IP地址。</p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140057333.png"></p><h4 id="2-客户端实际上与几个不同的-Google-服务器进行通信，以便实现”安全浏览”。为了只显示那些包含与谷歌主服务器IP地址为64-233-169-104有关的HTTP消息的帧，在Wireshark的Filter输入”http-amp-amp-ip-addr-x3D-x3D-64-233-169-104”。"><a href="#2-客户端实际上与几个不同的-Google-服务器进行通信，以便实现”安全浏览”。为了只显示那些包含与谷歌主服务器IP地址为64-233-169-104有关的HTTP消息的帧，在Wireshark的Filter输入”http-amp-amp-ip-addr-x3D-x3D-64-233-169-104”。" class="headerlink" title="2.   **客户端实际上与几个不同的 Google 服务器进行通信，以便实现”安全浏览”。为了只显示那些包含与谷歌主服务器IP地址为64.233.169.104有关的HTTP消息的帧，在Wireshark的Filter输入”http &amp;&amp; ip.addr &#x3D;&#x3D; 64.233.169.104”。"></a><strong>2.</strong>   **客户端实际上与几个不同的 Google 服务器进行通信，以便实现”安全浏览”。为了只显示那些包含与谷歌主服务器IP地址为64.233.169.104有关的HTTP消息的帧，在Wireshark的Filter输入”http &amp;&amp; ip.addr &#x3D;&#x3D; 64.233.169.104”。</h4><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140112179.png"></p><h4 id="3-从客户机发送到上述谷歌主服务器的HTTP-GET，时间为7-109267，携带HTTP-GET的IP数据报的源IP地址和目的IP地址以及TCP源端口和目的端口是什么"><a href="#3-从客户机发送到上述谷歌主服务器的HTTP-GET，时间为7-109267，携带HTTP-GET的IP数据报的源IP地址和目的IP地址以及TCP源端口和目的端口是什么" class="headerlink" title="3.   从客户机发送到上述谷歌主服务器的HTTP GET，时间为7.109267，携带HTTP GET的IP数据报的源IP地址和目的IP地址以及TCP源端口和目的端口是什么?"></a><strong>3.</strong>   <strong>从客户机发送到上述谷歌主服务器的HTTP GET，时间为7.109267，携带HTTP GET的IP数据报的源IP地址和目的IP地址以及TCP源端口和目的端口是什么?</strong></h4><p>注意时间显示格式改为“自捕获开始经过的秒数”。</p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140127408.png"></p><p>查看网络层和运输层分组信息：</p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140154158.png"></p><p>得到源IP是192.168.1.100，目的IP是64.233.169.104；TCP源端口号4335，目的端口号80。</p><h4 id="4．在什么时间接收到谷歌服务器200-OK的HTTP消息-携带此HTTP-200-OK消息的IP数据报的源IP地址和目的IP地址以及TCP源端口和目的端口是什么"><a href="#4．在什么时间接收到谷歌服务器200-OK的HTTP消息-携带此HTTP-200-OK消息的IP数据报的源IP地址和目的IP地址以及TCP源端口和目的端口是什么" class="headerlink" title="4．在什么时间接收到谷歌服务器200 OK的HTTP消息?携带此HTTP 200 OK消息的IP数据报的源IP地址和目的IP地址以及TCP源端口和目的端口是什么?"></a>4．在什么时间接收到谷歌服务器200 OK的HTTP消息?携带此HTTP 200 OK消息的IP数据报的源IP地址和目的IP地址以及TCP源端口和目的端口是什么?</h4><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140210815.png"></p><p>得到源IP是64.233.169.104，目的IP是192.168.1.100；TCP源端口号80，目的端口号4335。</p><h4 id="5-在GET命令发送到HTTP服务器之前，TCP必须首先三次握手设置连接。对于在7-109267时发的送的HTTP-GET报文，客户端到服务器的TCP-SYN是在什么时间发送的？TCP-SYN的源和目的地IP地址以及源和目的地端口是什么？ACK的源和目的地IP地址以及响应SYN发送的源和目的地端口是什么？此ACK在客户端收到的时间是哪个时间？"><a href="#5-在GET命令发送到HTTP服务器之前，TCP必须首先三次握手设置连接。对于在7-109267时发的送的HTTP-GET报文，客户端到服务器的TCP-SYN是在什么时间发送的？TCP-SYN的源和目的地IP地址以及源和目的地端口是什么？ACK的源和目的地IP地址以及响应SYN发送的源和目的地端口是什么？此ACK在客户端收到的时间是哪个时间？" class="headerlink" title="5.在GET命令发送到HTTP服务器之前，TCP必须首先三次握手设置连接。对于在7.109267时发的送的HTTP GET报文，客户端到服务器的TCP SYN是在什么时间发送的？TCP SYN的源和目的地IP地址以及源和目的地端口是什么？ACK的源和目的地IP地址以及响应SYN发送的源和目的地端口是什么？此ACK在客户端收到的时间是哪个时间？"></a>5.在GET命令发送到HTTP服务器之前，TCP必须首先三次握手设置连接。对于在7.109267时发的送的HTTP GET报文，客户端到服务器的TCP SYN是在什么时间发送的？TCP SYN的源和目的地IP地址以及源和目的地端口是什么？ACK的源和目的地IP地址以及响应SYN发送的源和目的地端口是什么？此ACK在客户端收到的时间是哪个时间？</h4><p>在筛选器输入“tcp”，找到7.109267时间对应的HTTP GET和三次握手。</p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140227651.png"></p><p>第一个TCP就是客户端发送的SYN，</p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140331806.png"></p><p>时间是7.075657，源IP是192.168.1.100，目的IP是64.233.169.104；TCP源端口号4335，目的端口号80。</p><p>第二个TCP是客户端发送的ACK。</p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140242170.png"></p><p>接收时间是7.108986。源IP是64.233.169.104，目的IP是192.168.1.100；TCP源端口号80，目的端口号4335。</p><h4 id="6-打开NAT-ISP-side。找到跟刚才客户端7-109267同样的HTTP-GET消息（这个时间是在-NAT-home-side-跟踪文件中记录的时间）。该消息何时出现在-NAT-ISP-side跟踪文件中？承载此HTTP-GET消息的IP数据报的源和目标IP地址以及TCP源和目的端口是多少？与您对上述问题3的回答相比，哪些字段相同，哪些字段不同？"><a href="#6-打开NAT-ISP-side。找到跟刚才客户端7-109267同样的HTTP-GET消息（这个时间是在-NAT-home-side-跟踪文件中记录的时间）。该消息何时出现在-NAT-ISP-side跟踪文件中？承载此HTTP-GET消息的IP数据报的源和目标IP地址以及TCP源和目的端口是多少？与您对上述问题3的回答相比，哪些字段相同，哪些字段不同？" class="headerlink" title="6.打开NAT_ISP_side。找到跟刚才客户端7.109267同样的HTTP GET消息（这个时间是在 NAT_home_side 跟踪文件中记录的时间）。该消息何时出现在 NAT_ISP_side跟踪文件中？承载此HTTP GET消息的IP数据报的源和目标IP地址以及TCP源和目的端口是多少？与您对上述问题3的回答相比，哪些字段相同，哪些字段不同？"></a>6.打开NAT_ISP_side。找到跟刚才客户端7.109267同样的HTTP GET消息（这个时间是在 NAT_home_side 跟踪文件中记录的时间）。该消息何时出现在 NAT_ISP_side跟踪文件中？承载此HTTP GET消息的IP数据报的源和目标IP地址以及TCP源和目的端口是多少？与您对上述问题3的回答相比，哪些字段相同，哪些字段不同？</h4><p>注意到7.109267的HTTP GET的长度是689：</p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140345503.png"></p><p>所以在NAT_ISP_side文件中寻找长度相同的报文。</p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140351093.png"></p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140357786.png"></p><p>接收时间是6.069168。源IP是71.192.34.104，目的IP是64.233.169.104；TCP源端口号4335，目的端口号80。</p><p>它们不同的字段是源IP地址和checksum（因为源IP地址不同），其他都相同。</p><h4 id="7-HTTP-GET消息中的任何字段是否已更改？携带HTTP-GET的IP数据报中的以下哪个字段发生了变化：版本，标题长度，标志，校验和。如果这些字段中的任何一个发生了变化，请说明为什么。"><a href="#7-HTTP-GET消息中的任何字段是否已更改？携带HTTP-GET的IP数据报中的以下哪个字段发生了变化：版本，标题长度，标志，校验和。如果这些字段中的任何一个发生了变化，请说明为什么。" class="headerlink" title="7. HTTP GET消息中的任何字段是否已更改？携带HTTP GET的IP数据报中的以下哪个字段发生了变化：版本，标题长度，标志，校验和。如果这些字段中的任何一个发生了变化，请说明为什么。**"></a><strong>7.</strong> HTTP GET消息中的任何字段是否已更改？携带HTTP GET的IP数据报中的以下哪个字段发生了变化：版本，标题长度，标志，校验和。如果这些字段中的任何一个发生了变化，请说明为什么。**</h4><p>只有校验和发生了变化。因为问题六中已经说明了，只有IP数据报的源地址发生了改变，版本、长度和标志都不变，但因为地址变了所以校验和变化了。</p><h4 id="8-在NAT-ISP-side跟踪文件中，从Google服务器收到的第一条HTTP-200-OK-消息在什么时间？携带此HTTP-200-OK消息的IP数据报上的源和目标IP地址以及TCP源和目标端口是什么？与第4问回答的NAT-home-side结果相比哪些字段相同，哪些字段不同？"><a href="#8-在NAT-ISP-side跟踪文件中，从Google服务器收到的第一条HTTP-200-OK-消息在什么时间？携带此HTTP-200-OK消息的IP数据报上的源和目标IP地址以及TCP源和目标端口是什么？与第4问回答的NAT-home-side结果相比哪些字段相同，哪些字段不同？" class="headerlink" title="8. 在NAT_ISP_side跟踪文件中，从Google服务器收到的第一条HTTP 200 OK 消息在什么时间？携带此HTTP 200 OK消息的IP数据报上的源和目标IP地址以及TCP源和目标端口是什么？与第4问回答的NAT_home_side结果相比哪些字段相同，哪些字段不同？"></a><strong>8.</strong> <strong>在NAT_ISP_side跟踪文件中，从Google服务器收到的第一条HTTP 200 OK 消息在什么时间？携带此HTTP 200 OK消息的IP数据报上的源和目标IP地址以及TCP源和目标端口是什么？与第4问回答的NAT_home_side结果相比哪些字段相同，哪些字段不同？</strong></h4><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140410135.png"></p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140416739.png"></p><p>接收时间是6.117570。源IP是64.233.169.104，目的IP是71.192.34.104；TCP源端口号80，目的端口号4335。</p><p>它们不同的字段是目的IP地址和checksum（因为目的IP地址不同），其他都相同。</p><h4 id="9-在NAT-ISP-side跟踪文件中，客户端到服务器TCP-SYN段和服务器对客户端TCP-ACK段在什么时间与上述问题5的段对应？这两个段的源和目的地-IP-地址以及来源和目的地端口是什么？这些字段中哪些字段相同，哪些字段与上述问题5的回答不同？"><a href="#9-在NAT-ISP-side跟踪文件中，客户端到服务器TCP-SYN段和服务器对客户端TCP-ACK段在什么时间与上述问题5的段对应？这两个段的源和目的地-IP-地址以及来源和目的地端口是什么？这些字段中哪些字段相同，哪些字段与上述问题5的回答不同？" class="headerlink" title="9. 在NAT_ISP_side跟踪文件中，客户端到服务器TCP SYN段和服务器对客户端TCP ACK段在什么时间与上述问题5的段对应？这两个段的源和目的地 IP 地址以及来源和目的地端口是什么？这些字段中哪些字段相同，哪些字段与上述问题5的回答不同？"></a><strong>9.</strong> <strong>在NAT_ISP_side跟踪文件中，客户端到服务器TCP SYN段和服务器对客户端TCP ACK段在什么时间与上述问题5的段对应？这两个段的源和目的地 IP 地址以及来源和目的地端口是什么？这些字段中哪些字段相同，哪些字段与上述问题5的回答不同？</strong></h4><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140428618.png"></p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140433783.png"></p><p>客户端到服务器的SYN接收时间是6.035475，源IP是71.192.34.104，目的IP是64.233.169.104；TCP源端口号4335，目的端口号80。</p><p><img src="/2022/05/04/categories/Computer_Networks/Computer_networks_course_lab3_NET/image-20220504140440533.png"></p><p>ACK的接收时间是6.067775。源IP是64.233.169.104，目的IP是71.192.34.104；TCP源端口号80，目的端口号4335。</p><p>和问题五的回答相比，同样是SYN的源IP地址和ACK的目的IP地址变了。</p><h4 id="10-做出类似的-HTTP-连接的-NAT-转换表。"><a href="#10-做出类似的-HTTP-连接的-NAT-转换表。" class="headerlink" title="10. 做出类似的 HTTP 连接的 NAT 转换表。"></a><strong>10.</strong> <strong>做出类似的 HTTP 连接的 NAT 转换表。</strong></h4><table><thead><tr><th><strong>WAN</strong> <strong>端</strong></th><th><strong>LAN</strong> <strong>端</strong></th></tr></thead><tbody><tr><td>71.192.34.104, 4335</td><td>192.168.1.100, 4335</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>运输层</title>
      <link href="/2022/04/27/categories/Computer_Networks/3.transport_layer/"/>
      <url>/2022/04/27/categories/Computer_Networks/3.transport_layer/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络——自顶向下-笔记"><a href="#计算机网络——自顶向下-笔记" class="headerlink" title="计算机网络——自顶向下  笔记"></a>计算机网络——自顶向下  笔记</h1><h2 id="3-运输层"><a href="#3-运输层" class="headerlink" title="3. 运输层"></a>3. 运输层</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>运输层协议为在不同主机上的应用进程间提供了逻辑通信。在发送端，运输层将应用程序接收到的报文转换成运输层分组——报文段segment，再将其传递给网络层；在接收端再反过来提取、处理报文段，把数据传递给应用进程使用。</p><pr><h3 id="3-2-多路复用和多路分解"><a href="#3-2-多路复用和多路分解" class="headerlink" title="3.2 多路复用和多路分解"></a>3.2 多路复用和多路分解</h3><p><strong>多路复用和多路分解</strong>：在接收主机分解，将接收到的segment交给相应的套接字，一路到多路；在发送主机复用，从多个套接字接受的数据，根据套接字对应的IP地址和端口号等信息加以封装，多路到一路。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220408145857226.png"></p><pr><p><strong>分解工作</strong>：主机接收IP数据报，每个数据报承载一个运输层报文段，每个段具有源、目的端口号,目的端口号标识了未来要传递给哪个套接字和进程。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220408150253180.png"></p><pr><h4 id="3-2-1-UDP多路复用与分解"><a href="#3-2-1-UDP多路复用与分解" class="headerlink" title="3.2.1 UDP多路复用与分解"></a>3.2.1 UDP多路复用与分解</h4><p><strong>UDP套接字</strong>由二元组全面标识 : <strong>目的地IP地址, 目的地端口号</strong>。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220408150734244.png"></p><p>当主机接收UDP段时，在段中检查目的地端口号，将UDP段定向到具有该端口号的套接字。</p><p><strong>注意：</strong>具有不同源IP地址或源端口号的IP数据报（目的IP地址和端口号相同）定向到相同的套接字。</p><p>源端口号的用途是作为“返回地址”的一部分，需要回发时从中取值。</p><pr><h4 id="3-2-2-TCP多路复用与分解"><a href="#3-2-2-TCP多路复用与分解" class="headerlink" title="3.2.2 TCP多路复用与分解"></a>3.2.2 TCP多路复用与分解</h4><p><strong>TCP套接字</strong>由四元组（<strong>4-tuple</strong>）标识:<strong>源IP地址，源端口号，目的IP地址，目的端口号</strong>。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220408151057488.png"></p><p>如上图，服务器主机可能支持许多并行的TCP套接字，每个套接字由其自己的四元组标识。</p><pr><h4 id="3-2-3-Web服务器与TCP"><a href="#3-2-3-Web服务器与TCP" class="headerlink" title="3.2.3 Web服务器与TCP"></a>3.2.3 Web服务器与TCP</h4><p>Web服务器对每个连接的客户机具有不同的套接字，非持久HTTP将为每个请求具有不同的套接字。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220408153423219.png"></p><pr><h3 id="3-3-无连接传输：UDP"><a href="#3-3-无连接传输：UDP" class="headerlink" title="3.3 无连接传输：UDP"></a>3.3 无连接传输：UDP</h3><p>“尽力而为”的服务，我的理解是：UDP几乎没有对IP增加别的东西，而IP就是尽力而为交付的服务。</p><p><strong>缺点：</strong>可能会造成丢包和失序。</p><p><strong>优点：</strong>简单，不需要连接；无拥塞控制，尽可能快地传输；段首部小。</p><p>适合可以容忍丢包，对速率敏感的应用程序。</p><h4 id="3-3-1-UDP报文段结构"><a href="#3-3-1-UDP报文段结构" class="headerlink" title="3.3.1 UDP报文段结构"></a>3.3.1 UDP报文段结构</h4><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220408185120860.png"></p><pr><h4 id="3-3-2-校验和"><a href="#3-3-2-校验和" class="headerlink" title="3.3.2 校验和"></a>3.3.2 校验和</h4><p>在传输的段中检查差错（如比特翻转）。</p><p>对所有报文段中的16比特字的和进行反码运算，求和时遇到的溢出都被回卷。回卷就是高位溢出的1当做最低位再求和。</p><pr><h3 id="3-4-可靠数据传输原理"><a href="#3-4-可靠数据传输原理" class="headerlink" title="3.4 可靠数据传输原理"></a>3.4 可靠数据传输原理</h3><p>靠可靠数据传输协议reliable data transfer protocol来实现可靠的服务，但下层协议是不可靠的。</p><p>在这里我们不仅考虑传输层的情况，所以用分组而不是用报文段来描述。不仅如此，还要用以下函数来描述rdt协议：</p><p>rdt_send()：由高层调用，发送方将数据交付给位于接受方的更高层；</p><p>udt_send()：通过不可信信道来发送分组。</p><p>rdt_rcv()：在接收端，调用该函数从信道接收分组。</p><p>deliver_data()：向高层交付数据。</p><p>仅考虑单向传输，并用有限状态机来定义发送方和接收方。横线上方表示引起状态变化的操作，下方表示事件发生时采取的动作。</p><h4 id="3-4-1-rdt1-0：完全可靠信道上的可靠数据传输"><a href="#3-4-1-rdt1-0：完全可靠信道上的可靠数据传输" class="headerlink" title="3.4.1 rdt1.0：完全可靠信道上的可靠数据传输"></a>3.4.1 rdt1.0：完全可靠信道上的可靠数据传输</h4><p>考虑最简单的情况，底层信道完全可靠，无比特差错和分组丢失，此时发送方只需将数据发向底层信道，接收方从底层信道读取数据。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220408191215741.png"></p><p><strong>rdt2.0：具有比特差错的信道</strong></p><p>考虑信道无分组丢失和失序，但会出现比特差错时，就需要检错、反馈（引入ACK和NAK，用一个bit长，0表示NAK，1表示ACK）和重传的机制。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220408191656330.png"></p><p>发送方有两种状态。左侧状态等待上层调用rdt_send发送数据（带有校验和），改变成右侧等待ACK或NAK的状态。此时若接收到接收方发送的ACK，则发送方得知上一个分组被正确接收，改变状态为左侧；若接收到NCK，则重传上一个分组，继续等待接收方对这个重传分组相应的ACK或NAK。</p><p>接收方只有一个状态，当分组到达时，要么回答一个ACK，要么回答一个NAK。</p><p>又被叫做<strong>停等协议</strong>：发送方发出1个分组，等待接收方响应后再继续发送。</p><p><strong>缺陷：</strong>ACK&#x2F;NAK受损。我们考虑在发送方接收到含糊不清的ACK&#x2F;NAK时，让发送方重传上一个分组即可，但接收方不知道上次自己所发送的ACK&#x2F;NAK是否被正确接收，所以无法确定这次接收的分组是新的还是重传的。</p><p><strong>rdt2.1：发送方处理受损的ACK&#x2F;NAK。</strong>在数据分组中添加新字段作为分组的编号，接收方只检查编号即可确定收到的分组是否有一次重传（比对上一次接受的分组编号是否相等）。对于停等协议这种简单的情况，只用1bit做编号就足够了。</p><p><strong>发送方</strong>：<img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220408193051503.png"></p><p><strong>接收方：</strong><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220408193122811.png"></p><p>以等待来自下层的调用0为例，它期望接受的分组序号是0，有三种情况。先检验是否受损，如果受损了就发送NAK；若没受损，则检查下层传递的分组序号，如果为seq1，说明传输失序了，接收方应该发送ACK表明接收到了失序的分组，不做任何操作，继续等待下一次重传seq0；若下层传递的分组序号为seq0，说明传输未失序，此时继续发送ACK，进入下一状态，等待来自下层的调用1。</p><p>纠错过程发生在：因为当接收方期待seq0，却收到了seq1时，会不做任何操作地返回ACK，此时发送方处在等待响应seq1的ACK的状态，幸运的是，发送方还歪打正着收到了ACK，继续发送下一分组seq0，双方都很满意。</p><p>注意到双方状态都增加了一倍，因为必须记住当前的分组序号是0还是1。</p><p><strong>rdt2.2：仅使用ACK</strong>。接收端收到包无论正确与否，都返回 ACK ，同时附上数据包发送时的序号（make_pkt()中的参数ACK0和ACK1），发送方必须检查接收到的ACK报文中被确认的分组序号（is_ACK()中的参数0和1）。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220421203709731.png"></p><p><strong>rdt3.0：考虑具有差错和丢包的信道</strong></p><p>增加定时机制，发送方等待ACK一段“合理的”时间。如在这段时间没有收到ACK则重传。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220421204855791.png"></p><p>运行情况：</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220421205129275.png"></p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220421205136696.png"></p><pr><h4 id="3-4-2流水线可靠数据传输协议"><a href="#3-4-2流水线可靠数据传输协议" class="headerlink" title="3.4.2流水线可靠数据传输协议"></a>3.4.2流水线可靠数据传输协议</h4><p>我们注意到发送方的利用率很低。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220421205712513.png"></p><p>使用流水线技术，不使用停等方式，发送方发送多个分组而无需等待。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220421205917798.png"></p><p>带来的影响是：增加序号范围、发收两方必须缓存多个分组、解决流水线的差错恢复问题。</p><pr><h4 id="3-4-3-回退N步"><a href="#3-4-3-回退N步" class="headerlink" title="3.4.3 回退N步"></a>3.4.3 回退N步</h4><p>GBN允许发送方发送多个分组而不需要等待确认。发送方和接收方都具有一定容量的缓冲区（即窗口），窗口内是帧的序号。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220426160006240.png"></p><p>帧序号被分为两部分，一部分是发送还未被确认的，一部分是可用还未发送的。发送窗口内的帧代表发送还未被确认，尺寸为N。</p><p><strong>发送方</strong>响应的三种事件：</p><p>（1）上层调用rdt_send(),发送方检查窗口是否已满(是否有N个已发送但未确认的分组)，未满则产生一个分组并发送；</p><p>（2）发送方收到一个ACK，代表包括该序号n在内之前的分组都被正确接收，体现了<strong>累计确认</strong>的特点；</p><p>（3）超时事件发生，发送方重发所有以发送但未被确认的分组。</p><p><strong>接收方</strong>的接收窗口尺寸只有1，如果一个序号为n的分组被正确、按序接收（收到期望序号的分组），就向发送方发送一个ACKs,s为期望收到的下一分组序号；如果次序乱了就丢弃该分组并重发已按序接受的分组ACK。</p><p>丢帧时情况如图：</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220426164737841.png"></p><p>N&#x3D;3,发送方同时发送3个分组，在继续发送前等待分组被确认，当每接收到一个连续的ACK时窗口向前滑动，发送新的分组。</p><pr><h4 id="3-4-4-选择重传"><a href="#3-4-4-选择重传" class="headerlink" title="3.4.4 选择重传"></a>3.4.4 选择重传</h4><p>SR避免大量重传。发送窗口尺寸为N；接收窗口尺寸为N。</p><p>发送方窗口内的序号被分为已经确认的、发送但未被确认的、可用但还未发送的。</p><p><strong>发送方</strong>响应的三种事件：</p><p>（1）上层调用rdt_send(),发送方检查下一个可用于该分组的序号，如果在窗口内则打包发送；</p><p>（2）发送方收到一个ACK，只代表包括该序号n的分组被标记为正确接收。如果该序号n等于send_base(窗口头)，则窗口向前移动到未被确认的最小序号处，并发送新窗口中未发送的分组；</p><p>（3）超时事件发生，每个分组都有自己的定时器，发送方重发这<strong>一个</strong>未被确认的分组。</p><p><strong>接收方</strong>只在乎接受的分组是否正确，不管是否失序。失序的分组被保留到之前序号更小的分组都被接收为止。每接受一个正确分组，就返回一个该分组的ACK，即使该分组已经确认了并不在接受窗口中。收到最低位置的分组时，窗口滑动。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220426170007570.png"></p><p><strong>问题：窗口长度小于等于序号空间的一半</strong>。</p><p>因为序号空间是循环使用的，如果窗口太大，就会出现同一窗口中出现两个相同的循环的序号。对于序号为0 1 2 3 0 1 2 3，这种情况出现在接收方对第一个分组序号0的ACK确认丢失，发送方重传该分组0，这会和后面第二个分组0混淆。</p><h3 id="3-5-面向连接的传输-TCP"><a href="#3-5-面向连接的传输-TCP" class="headerlink" title="3.5 面向连接的传输 TCP"></a>3.5 面向连接的传输 TCP</h3><p>差错检验、重传、累计确认、定时器、序号确认的应用。</p><h4 id="3-5-1-TCP确认"><a href="#3-5-1-TCP确认" class="headerlink" title="3.5.1 TCP确认"></a>3.5.1 TCP确认</h4><p><strong>面向连接的</strong>：三次握手。</p><p><strong>点到点</strong>：TCP连接是在单个发送方和单个接收方之间的连接；只在端系统上运行，和路由器无关。</p><p><strong>全双工服务</strong>：A与B建立TCP连接，即建立了一条双向数据流。</p><p>TCP连接的组成包括缓存、变量和套接字：进程的数据通过套接字后，被TCP引导到<strong>发送缓存</strong>中，然后从发送缓存取出小于<strong>最大报文段长度MSS</strong>的数据，TCP为数据配上一个首部，形成多个报文段，传给网络层。在另一端接受报文段后就存到接受缓存中。</p><pr><h4 id="3-5-2-TCP报文段结构"><a href="#3-5-2-TCP报文段结构" class="headerlink" title="3.5.2 TCP报文段结构"></a>3.5.2 TCP报文段结构</h4><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220426173224396.png"></p><p><strong>TCP序号</strong>：报文段中第一个字节在整个字节流中的位置。一个文件5000字节，MSS100字节，建立50个报文段，第一个报文段序号0，第2个序号100；</p><p><strong>确认号</strong>：期望从对方收到下一个字节的序号，因为TCP是双工的。同时提供累计确认。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220426174215123.png"></p><p>A的第一个报文段序号42，B的第一个报文段序号79，A发送数据后期望的确认号是79。A对B的确认被捎带在B发送给A的报文段中。</p><pr><h4 id="3-5-3-RTT的估计与超时"><a href="#3-5-3-RTT的估计与超时" class="headerlink" title="3.5.3 RTT的估计与超时"></a>3.5.3 RTT的估计与超时</h4><p>TCP的超时值要大于RTT，太短会造成过早超时，太长导致对丢失响应过慢。</p><p>测量<strong>SampleRTT</strong>：仅在一个时刻测量从发送报文段到接受ACK的时间。</p><p>为了让估计RTT更平滑，取α&#x3D;0.128：<br>$$<br>EstimatedRTT &#x3D; (1- α)<em>EstimatedRTT + α</em>SampleRTT<br>$$<br>取β&#x3D;0.25，估算SampleRTT与EstimatedRTT的差：<br>$$<br>DevRTT &#x3D; (1-β)<em>DevRTT +<br>             β</em>|SampleRTT-EstimatedRTT|<br>$$<br>估算超时值：<br>$$<br>TimeoutInterval &#x3D; EstimatedRTT + 4*DevRTT<br>$$</p><h4 id><a href="#" class="headerlink" title></a><pr></pr></h4><h4 id="3-5-4-可靠数据传输"><a href="#3-5-4-可靠数据传输" class="headerlink" title="3.5.4 可靠数据传输"></a>3.5.4 可靠数据传输</h4><p>发送方：</p><p>（1）上层调用，将数据封装成报文段并交给IP，启动定时器。超时后重传。</p><p>（2）收到累计ACK，将ACK与最早未被确认的序号比较，窗口向右滑动（类似GBN）。</p><p>（3）收到三个冗余ACK，快速重传。接收方收到序号大于期望的报文段时，检测导报文段丢失，就对最后一个按序字节数据进行重复确认。因为发送方经常大量发送报文段，如果一个报文段丢失会导致多个冗余ACK。如果发送方接收到对同个数据的3个冗余ACK，就执行快速重传。</p><pr><h4 id="3-5-5-流量控制"><a href="#3-5-5-流量控制" class="headerlink" title="3.5.5 流量控制"></a>3.5.5 流量控制</h4><p>发送方发送数据太快，导致接收方来不及接收时，需进行流量控制。</p><p>通过接收窗口字段实现，接收方计算缓存区的剩余空间，即接收窗口大小，通过TCP首部字段反馈给发送方。</p><pr><h4 id="3-5-6-连接管理"><a href="#3-5-6-连接管理" class="headerlink" title="3.5.6 连接管理"></a>3.5.6 连接管理</h4><p>TCP三个状态：连接管理、数据传输、连接释放。</p><p>三次握手，一个请求，两个确认：</p><p>（1）发送SYN报文段，选取初始序号放到序号字段，不包含应用层数据，封装为IP数据报。</p><p>（2）SYN报文段到达服务器，提取出SYN，为该TCP分配TCP缓存和变量，并向客户发送允许连接的报文段SYNACK。同样不包含应用层数据，SYN为1，确认号&#x3D;（1）中序号+1。</p><p>（3）收到SYNACK后，客户给这条连接分配缓存和变量，向服务器发送报文段，SYN为0，确认号&#x3D;（2）中序号+1，用来确认。</p><p>连接结束：</p><p>（1）客户发送FIN报文段，FIN&#x3D;1。</p><p>（2）服务器收到FIN，响应ACK，关闭连接，发送FIN。</p><p>（3）客户收到FIN，响应ACK，进入超时等待。</p><p>超时等待可以保证客户端发送的最后一个ACK报文能够到达服务器，即使这个ACK报文丢失了，服务端会重发FIN报文给客户端，客户端收到后知道之前发送的ACK报文丢失了，然后再次发送ACK报文给服务端。如果过了超时等待的时间，客户端没有收到FIN报文，表示对方已经成功接收，客户端才能关闭。</p><p>（4）服务器接受ACK，客户连接关闭。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220426184036447.png"></p><pr><h3 id="3-7-TCP拥塞控制"><a href="#3-7-TCP拥塞控制" class="headerlink" title="3.7 TCP拥塞控制"></a>3.7 TCP拥塞控制</h3><p>TCP使用端到端的拥塞控制，因为网络层不提供显式的拥塞反馈。</p><p>方法：让每个发送方根据感知到的网络拥塞程度来限制发送流量的速率。</p><p>拥塞窗口cwnd：限制发送方发送流量的速率。</p><p>慢启动阈值ssthresh：丢包事件发生，阈值设为cwnd的一半。</p><p>发送方根据丢包事件来感知拥塞，如果出现了超时或3个冗余ACK，说明产生了拥塞。</p><p><strong>TCP拥塞控制算法：</strong></p><p>（1）慢启动：cwnd&lt;ssthresh。刚建立连接时，只发送一个报文段，每报文段被首次确认就增加一个。在慢启动阶段以指数增长，直到第一次丢包发生。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220427202251952.png"></p><p>（2）拥塞避免：cwnd&gt;ssthresh。进入该状态，cwnd一般为为上次拥塞时的一半。此时每个RTT将cwnd增加一个MSS&#x2F;cwnd,即现象增长。</p><p>（3）出现三个冗余ACK，阈值设为cwnd的一半，cwnd设为阈值。因为TCP对这种丢包的行为反应不像超时那么剧烈。</p><p>（4）超时发生，阈值设为cwnd的一半，cwnd设为1。</p><p>特点：加增倍减。</p><p><img src="/2022/04/27/categories/Computer_Networks/3.transport_layer/image-20220427203630783.png"></p></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr></pr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>卷积神经网络 CNN</title>
      <link href="/2022/04/25/categories/Deep_learning/CNN/"/>
      <url>/2022/04/25/categories/Deep_learning/CNN/</url>
      
        <content type="html"><![CDATA[<h1 id="卷积神经网络-CNN"><a href="#卷积神经网络-CNN" class="headerlink" title="卷积神经网络 CNN"></a>卷积神经网络 CNN</h1><p>Convolutional Neural Network——designed for image</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一张图片有三维的tensor（可以理解为大于2的矩阵），一个维度是长，一个维度是宽，一个维度是channels。长和宽代表着图片的解析度，像素点的个数；channels&#x3D;3就是RGB，&#x3D;1就是灰度图像。我们把图片拉直成向量，就可以作为一个neural的输入，这个向量每一维的数值就代表这个像素颜色的强度。</p><p><img src="/2022/04/25/categories/Deep_learning/CNN/image-20220125113646601.png" alt="image-20220125113646601"></p><h2 id="卷积处理"><a href="#卷积处理" class="headerlink" title="卷积处理"></a>卷积处理</h2><p>假设我们用1000个神经元直接进行训练，需要3*10^7个参数。对于我们来说参数越多，模型的弹性越大，越会有overfitting的风险。为了避免使用这么多的参数，同时考虑到影像辨识的目的，我们希望模型能够根据一定特征的patterns来做识别，比如鸟嘴、鸟的眼睛，图片的其他部分就不需要作为神经的输入，不需要fully connected。</p><p><img src="/2022/04/25/categories/Deep_learning/CNN/image-20220125113938251.png" alt="image-20220125113938251"></p><p>convolution就是用不同的filter来识别patterns。</p><p><img src="/2022/04/25/categories/Deep_learning/CNN/image-20220125121007441.png" alt="image-20220125121007441"></p><p>stride:步长；</p><p>padding:填充；</p><p>feature map:图片通过一个卷积层之后得到的新的特征图片，它的channels&#x3D;上一个卷积层filters的个数。下一卷积层中filter的高度就是图片的channels。</p><p>每一个filter矩阵中的元素对应了神经元共用的参数，让一个卷积核扫过整张图片（卷积，让不同的receptive field 可以共用参数），这样就降低了弹性，避免过拟合问题。</p><p><img src="/2022/04/25/categories/Deep_learning/CNN/image-20220125122147730.png" alt="image-20220125122147730"></p><h2 id="池化-Pooling"><a href="#池化-Pooling" class="headerlink" title="池化 Pooling"></a>池化 Pooling</h2><p>我们发现对大的图片进行抽样后，依旧保持图像特征。做完convolution后，可以进行pooling，把图片变小（channels不变），减少运算量。池化的filter进行运算之后，选择只保留一定区域里的代表（比如max）。</p><p><img src="/2022/04/25/categories/Deep_learning/CNN/image-20220125125630182.png" alt="image-20220125125630182"></p><p>但如果对于特别精细的特征识别，就不做pooling。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>应用层</title>
      <link href="/2022/04/21/categories/Computer_Networks/2.application_layer/"/>
      <url>/2022/04/21/categories/Computer_Networks/2.application_layer/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络——自顶向下"><a href="#计算机网络——自顶向下" class="headerlink" title="计算机网络——自顶向下"></a>计算机网络——自顶向下</h1><h2 id="2-应用层"><a href="#2-应用层" class="headerlink" title="2 应用层"></a>2 应用层</h2><h3 id="2-1-应用层协议原理"><a href="#2-1-应用层协议原理" class="headerlink" title="2.1 应用层协议原理"></a>2.1 应用层协议原理</h3><h4 id="2-1-1-网络应用程序体系结构"><a href="#2-1-1-网络应用程序体系结构" class="headerlink" title="2.1.1 网络应用程序体系结构"></a>2.1.1 网络应用程序体系结构</h4><p><strong>客户机&#x2F;服务器</strong>：<img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408115155480.png"></p><p>例：web、FTP、e-main</p><p><strong>对等P2P</strong>：<img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408115220496.png"></p><p>例：Gnurella、迅雷</p><p><strong>混合模式</strong></p><h4 id="2-1-2-进程通信"><a href="#2-1-2-进程通信" class="headerlink" title="2.1.2 进程通信"></a>2.1.2 进程通信</h4><p>同一主机中，使用IPC（操作系统定义）通信。</p><p>不同主机中，进城process通过交换报文messgae进行通信。</p><p><strong>客户和服务器进程</strong>：客户机发起通信，服务器等待联系。P2P体系的应用进城具有双重特性。</p><p><strong>进程的接口</strong>：套接字，是应用层与运输层之间的接口。</p><p><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408115956927.png"></p><p><strong>进程寻址</strong>：主机IP地址+进程端口号。</p><h4 id="2-1-3-可供应用程序使用的传输服务"><a href="#2-1-3-可供应用程序使用的传输服务" class="headerlink" title="2.1.3 可供应用程序使用的传输服务"></a>2.1.3 可供应用程序使用的传输服务</h4><p><strong>可靠数据传输</strong>：是否容忍丢失。</p><p><strong>吞吐量</strong>：传送比特的速率。不同应用对带宽的限制。</p><p><strong>定时</strong>：就是延时。</p><p><strong>安全</strong>。</p><h3 id="2-2-Web应用和HTTP协议"><a href="#2-2-Web应用和HTTP协议" class="headerlink" title="2.2 Web应用和HTTP协议"></a>2.2 Web应用和HTTP协议</h3><p>Web的应用层协议是HTTP，超文本传输协议。</p><h4 id="2-2-1-HTTP概况"><a href="#2-2-1-HTTP概况" class="headerlink" title="2.2.1 HTTP概况"></a>2.2.1 HTTP概况</h4><p>HTTP由客户机程序和服务器程序实现，通过交换HTTP报文进行会话。</p><p>Web页面由对象（HTML文件、JPG图片等）组成，每个对象由URL(( Uniform Resource Locator)进行寻址。</p><p><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408120725355.png"></p><p>HTTP是一个无状态协议，因为服务器并不保存关于客户的任何信息。</p><h4 id="2-2-2-非持续连接和持续连接"><a href="#2-2-2-非持续连接和持续连接" class="headerlink" title="2.2.2 非持续连接和持续连接"></a>2.2.2 非持续连接和持续连接</h4><p><strong>非持续连接</strong>(Version&#x3D;1.0)：TCP每发送一个对象后就关闭。</p><p>1.客户进程在80端口号（默认）发起向客户机<a href="http://www.swust.edu.cn/">www.swust.edu.cn</a> 的TCP连接；</p><p>2.客户经过它的套接字向服务器发送请求报文；</p><p>3.服务器经过它的套接字接收请求报文，检索出对象<a href="http://www.swust.edu.cn/someDept/pic.gif">www.swust.edu.cn/someDept/pic.gif</a> 并封装到报文中，再通过套接字向客户发送响应报文；</p><p>4.服务器进程断开TCP连接；</p><p>5.客户收到响应报文，连接关闭；</p><p>6.重复上述步骤引用其他对象。</p><p><strong>总响应时间：</strong>2个RTT+服务器传输时间。原因：TCP三次握手的前两个部分占用1个RTT，客户机结合握手的第三个部分向TCP发送一个HTTP请求报文，然后服务器响应，这用去了另一个RTT。</p><p><strong>缺点</strong>：串行访问时间长；并行访问占用资源多(分配的TCP缓冲区和TCP变量)。</p><p><strong>持续连接</strong>(Version&#x3D;1.11)：TCP为相同的客户-服务器间的请求和响应持续打开。</p><h4 id="2-2-3-HTTP报文格式"><a href="#2-2-3-HTTP报文格式" class="headerlink" title="2.2.3 HTTP报文格式"></a>2.2.3 HTTP报文格式</h4><p><strong>请求报文</strong>:第一行为请求行（方法method+URL+HTTP版本)，后继行为首部行，最后是实体。</p><p><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408123221263.png"></p><p><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408123347554.png"></p><p>method方法类型有:GET（请求访问，实体为空）、POST、HEAD、PUT、DELETE。</p><p><strong>响应报文</strong>：第一行为状态行（HTTP版本+状态码+短语phrase)，后继行为首部行，最后是实体。</p><p><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408133759610.png"></p><p><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408133811897.png"></p><p>常见的状态码和短语：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span> OK</span><br><span class="line"><span class="comment">//请求成功，请求的对象在这个报文后面</span></span><br><span class="line"><span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="comment">//请求的对象已转移，新的URL在响应报文的Location:首部行中指定</span></span><br><span class="line"><span class="number">400</span> Bad Request</span><br><span class="line"><span class="comment">//请求报文不为服务器理解</span></span><br><span class="line"><span class="number">404</span> Not Found</span><br><span class="line"><span class="comment">//请求的文档没有在该服务器上发现</span></span><br><span class="line"><span class="number">505</span> HTTP Version Not Supported</span><br></pre></td></tr></table></figure><h4 id="2-2-4-用户与服务器的交互：Cookie"><a href="#2-2-4-用户与服务器的交互：Cookie" class="headerlink" title="2.2.4 用户与服务器的交互：Cookie"></a>2.2.4 用户与服务器的交互：Cookie</h4><p>无状态的HTTP简化了服务器的设计，但不能保存用户信息。所以HTTP使用Cookie对用户进行跟踪。</p><p><strong>cookie组件</strong>包括：HTTP响应报文中的cookie首部行；请求报文中的cookie首部行；用户主机保留的cookie文件；Web站点的后端数据库。</p><p>用户每请求一个Web页面，浏览器会从cookie文件中获取对这个网站的识别码，放到HTTP请求报文中的包括识别码的cookie首部行中。cookie首部用来标识一个用户。</p><p><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408134647714.png"></p><h4 id="2-2-5-Web缓存"><a href="#2-2-5-Web缓存" class="headerlink" title="2.2.5 Web缓存"></a>2.2.5 Web缓存</h4><p><strong>Web缓存器</strong>：保存最近请求的web对象。浏览器向缓存发送所有HTTP请求，若对象在缓存中：缓存返回对象；否则缓存向起始服务器请求对象，然后向客户机返回对象。</p><p>好处：1）减小客户机请求的响应时间；2）减少机构内部网与因特网接入链路的通信量。</p><h4 id="2-2-6-条件GET方法"><a href="#2-2-6-条件GET方法" class="headerlink" title="2.2.6 条件GET方法"></a>2.2.6 条件GET方法</h4><p>为解决缓存中对象始终最新的问题，用<strong>条件GET</strong>方法：缓存器在HTTP请求中包含一个“If-modified-since: <date>”，指定缓存版本的日期，服务器判断如果缓存的拷贝是最新，就响应不包含对象: </date></p><p>“HTTP&#x2F;1.0 304 Not Modified”，否则修改对象。</p><p><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408135709719.png"></p><h3 id="2-3-文件传输协议：FTP"><a href="#2-3-文件传输协议：FTP" class="headerlink" title="2.3 文件传输协议：FTP"></a>2.3 文件传输协议：FTP</h3><p><strong>特点</strong>：使用双TCP连接，一个<strong>控制连接</strong>(端口21)，一个<strong>数据连接</strong>(端口20)。</p><p><strong>控制连接</strong>用于在两台主机传输控制信息，如用户标识、口令、控制命令等，<strong>数据连接</strong>用于实际发送文件。</p><p>FTP使用独立的控制连接，我们称FTP是<strong>带外控制</strong>；而HTTP是带内控制。</p><h3 id="2-4-电子邮件"><a href="#2-4-电子邮件" class="headerlink" title="2.4  电子邮件"></a>2.4  电子邮件</h3><p>电子邮件系统组成：用户代理(阅读器，如Outlook,Foxmail)、邮件服务器、简单邮件<strong>传输</strong>协议: SMTP。</p><p>从发送方的用户代理开始，传输到发送方的邮件服务器，再传输到接收方的邮件服务器，最后被分发到接收方的邮箱中。</p><h4 id="2-4-1-SMTP"><a href="#2-4-1-SMTP" class="headerlink" title="2.4.1 SMTP"></a>2.4.1 SMTP</h4><p>报文格式：7bitASCII。</p><p>端口号：25。</p><p>使用TCP连接。传输阶段有握手、传输、关闭。</p><h4 id="2-4-4-邮件访问协议"><a href="#2-4-4-邮件访问协议" class="headerlink" title="2.4.4 邮件访问协议"></a>2.4.4 邮件访问协议</h4><p>POP3邮局协议</p><p>IMAP4因特网邮件访问协议</p><p>基于Web的电子邮件：用户代理就是浏览器，使用HTTP与其他远程邮箱进行通信。但邮件服务器和其他服务器间仍使用SMTP。 </p><h3 id="2-5-DNS"><a href="#2-5-DNS" class="headerlink" title="2.5 DNS"></a>2.5 DNS</h3><p>Domain Name Server域名服务器。</p><p>使用UDP。</p><p>例：主机名为<a href="http://www.swust.edu.cn,ip地址/">www.swust.edu.cn，IP地址</a>(32 bit) 为220.166.52.4，DNS完成主机名到IP地址的解析。</p><h4 id="2-5-1-分布式、等级制数据库"><a href="#2-5-1-分布式、等级制数据库" class="headerlink" title="2.5.1 分布式、等级制数据库"></a>2.5.1 分布式、等级制数据库</h4><h4 id><a href="#" class="headerlink" title></a><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408141738936.png"></h4><h4 id="2-5-2两种查询方式"><a href="#2-5-2两种查询方式" class="headerlink" title="2.5.2两种查询方式"></a>2.5.2两种查询方式</h4><p><strong>迭代查询</strong>：我的理解是，去去就回。</p><p><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408142004722.png"></p><p><strong>递归查询</strong>：我的理解是，先去后回。</p><p><img src="/2022/04/21/categories/Computer_Networks/2.application_layer/image-20220408142036974.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习服务器平台简单手册——AutoDL</title>
      <link href="/2022/03/22/categories/Deep_learning/AutoDL/"/>
      <url>/2022/03/22/categories/Deep_learning/AutoDL/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习平台——AutoDL"><a href="#深度学习平台——AutoDL" class="headerlink" title="深度学习平台——AutoDL"></a>深度学习平台——AutoDL</h1><p>无意中在B站看到了有人推荐AutoDL这个网站，我去看了一下AutoDL平台的价格也很吸引人，而且还有学生优惠，所以先试着用它来跑代码。</p><p>AutoDL主页：<a href="https://www.autodl.com/home">https://www.autodl.com/home</a></p><h2 id="1-注册"><a href="#1-注册" class="headerlink" title="1.注册"></a>1.注册</h2><p>新用户注册后会赠送代金券。注册之后可以使用教育邮箱（我用的就是湖大的@hun.edu.cn的邮箱)验证来进行学生认证，获得折扣。</p><p><img src="/2022/03/22/categories/Deep_learning/AutoDL/image-20220222182232303.png" alt="image-20220222182232303"></p><h2 id="2-创建实例"><a href="#2-创建实例" class="headerlink" title="2. 创建实例"></a>2. 创建实例</h2><p>点击右上角控制台，进入我的实例，可以租用新实例。</p><p><img src="/2022/03/22/categories/Deep_learning/AutoDL/image-20220222182340678.png" alt="image-20220222182340678"></p><p>有四个区的多种主机可以选择。选择的时候除了关注型号外，还要注意硬盘的容量、是否可以后期扩充等。</p><p><img src="/2022/03/22/categories/Deep_learning/AutoDL/image-20220222182525215.png" alt="image-20220222182525215"></p><p>创建后根据需要的库版本选择镜像。</p><h2 id="3-传输文件"><a href="#3-传输文件" class="headerlink" title="3. 传输文件"></a>3. 传输文件</h2><p>要跑代码的第一个任务就是把代码工程上传到网站平台上。在平时我一般使用pycharm和vs code进行代码编译，但是pycharm的社区板不支持远程编程，专业版又需要付费，所以这里选择使用vs code。</p><p>在扩展中搜索Remote-SSH并安装（以下图片来自网站的帮助文档）。</p><p><img src="/image-20210916200211959.png" alt="image-20210916200211959"></p><p>安装后添加刚才申请成功的登录信息：主机ID和密码。</p><p><img src="/image-20210916195423472.png" alt="image-20210916195423472"></p><p>在vs code中连接主机并依据提示输入ID和密码。</p><p><img src="/image-20210916200538203.png" alt="image-20210916200538203"></p><p><img src="/image-20210916200742778.png" alt="image-20210916200742778"></p><p><img src="/image-20210916201832127.png" alt="image-20210916201832127"></p><p>弹窗提示配置配置文件，不需要修改的话可以回车选择默认路径。</p><p><img src="/image-20220120120528330.png" alt="image-20220120120528330"></p><p><img src="/image-20210916202041401.png" alt="image-20210916202041401"></p><p>这时会额外打开一个vs code的窗口，根据提示输入密码。</p><p><img src="/image-20210916202253038.png" alt="image-20210916202253038"></p><p>此时注意到左下角有主机ID的标示，说明连接成功。</p><p><img src="/2022/03/22/categories/Deep_learning/AutoDL/image-20220222183516989.png" alt="image-20220222183516989"></p><p>下载**<a href="https://www.autodl.com/docs/filezilla/">FileZilla</a>软件**（客户端版）进行上传数据。安装后打开文件-&gt;站点管理器-&gt;新站点，选择SFTP协议，填入主机ID和端口号（在SSH登录信息处可以看到，如ssh -p 29154 <a href="mailto:&#x72;&#111;&#x6f;&#x74;&#x40;&#114;&#x65;&#x67;&#105;&#x6f;&#110;&#45;&#x31;&#x31;&#x2e;&#x61;&#x75;&#x74;&#111;&#100;&#108;&#x2e;&#x63;&#111;&#x6d;">&#x72;&#111;&#x6f;&#x74;&#x40;&#114;&#x65;&#x67;&#105;&#x6f;&#110;&#45;&#x31;&#x31;&#x2e;&#x61;&#x75;&#x74;&#111;&#100;&#108;&#x2e;&#x63;&#111;&#x6d;</a> ，主机就是region-11.autodl.com ，端口为29154），用户root，输入密码，点击连接。</p><p><img src="/2022/03/22/categories/Deep_learning/AutoDL/image-20220222183848018.png" alt="image-20220222183848018"></p><p>连接（图示为未连接）成功后左侧为本机的文件路径，右侧为远程主机的文件路径，将左侧文件直接拖入右侧路径即可。</p><p>![image-20211109112833891]image-20211109112833891.png)</p><p>然后在vs code中按远程主机路径打开项目即可进行远程调试。</p><h2 id="4-公开数据集"><a href="#4-公开数据集" class="headerlink" title="4. 公开数据集"></a>4. 公开数据集</h2><p>同样可以采用第三条的方法传输数据集，但网站还有几个常用公开数据集，可以直接使用。</p><p><img src="/2022/03/22/categories/Deep_learning/AutoDL/image-20220222184508596.png" alt="image-20220222184508596"></p><p>复制路径后就可以在项目中进行学习了。</p><h2 id="5-我的镜像"><a href="#5-我的镜像" class="headerlink" title="5. 我的镜像"></a>5. 我的镜像</h2><p>实例运行结束后，可以把当前配置保存为镜像，在下一次需要的时候使用镜像配置就可以了。详细参考网站的帮助文档。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络概述</title>
      <link href="/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/"/>
      <url>/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h1><h2 id="1-1-什么是Internet"><a href="#1-1-什么是Internet" class="headerlink" title="1.1 什么是Internet"></a>1.1 什么是Internet</h2><p>网络：结点和边</p><p>计算机网络：</p><p>（1）结点（端系统（主机）结点：手机、pad、电脑……和上面运行的网络应用程序；数据交换结点：路由器、交换机）</p><p>（2）边：通信链路（接入网链路：主机连接到互联网的链路；主干链路：路由器间的链路）</p><p>（3）协议：标准。协议定义了在两个或多个通信实体之间交换的报文格式和次序，以及在报文传输和接受或其他事件方面所采取的动作。</p><h2 id="1-2-网络边缘"><a href="#1-2-网络边缘" class="headerlink" title="1.2 网络边缘"></a>1.2 网络边缘</h2><p>按组成类型将互联网的网络结构分成</p><p>网络边缘edge：主机、应用程序；</p><p>网络核心core：路由器、网络的网络；</p><p>网络接入access：连接edge和core的通信链路；</p><p><img src="/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/image-20220204153616869.png"></p><p>边缘通过接入连接核心，从而使任意两个端系统之间可以相互通信。网络核心起着数据交换的作用。 </p><h3 id="1、两种模式"><a href="#1、两种模式" class="headerlink" title="1、两种模式"></a>1、两种模式</h3><h4 id="（1）C-x2F-S-客户端-x2F-服务器模式"><a href="#（1）C-x2F-S-客户端-x2F-服务器模式" class="headerlink" title="（1）C&#x2F;S  客户端&#x2F;服务器模式"></a>（1）C&#x2F;S  客户端&#x2F;服务器模式</h4><p>客户端向服务器请求、接收服务，服务器为主，客户端为从。</p><p>存在可扩充性差的问题，比如客户端请求多了就会不响应。</p><h4 id="（2）对等peer-peer模式"><a href="#（2）对等peer-peer模式" class="headerlink" title="（2）对等peer-peer模式"></a>（2）对等peer-peer模式</h4><p>例如迅雷等分布式的文件分发系统。请求多，相应的结点也多。</p><h3 id="2-、通信方式"><a href="#2-、通信方式" class="headerlink" title="2 、通信方式"></a>2 、通信方式</h3><h4 id="（1）面向连接的通信方式"><a href="#（1）面向连接的通信方式" class="headerlink" title="（1）面向连接的通信方式"></a>（1）面向连接的通信方式</h4><p>在端系统之间传输数据，传输之前先握手做好准备，建立连接。</p><p>TCP服务（可靠性、流量控制、拥塞控制）。</p><h4 id="（2）无连接的服务"><a href="#（2）无连接的服务" class="headerlink" title="（2）无连接的服务"></a>（2）无连接的服务</h4><p>UDP:不打招呼，很简单。</p><p>如实时聊天。</p><h2 id="1-3-网络核心"><a href="#1-3-网络核心" class="headerlink" title="1.3 网络核心"></a>1.3 网络核心</h2><p>路由器的网状网络</p><p><strong>怎样通过网络进行数据传输</strong></p><h4 id="（1）电路交换"><a href="#（1）电路交换" class="headerlink" title="（1）电路交换"></a>（1）电路交换</h4><p>将网络资源分成片，为呼叫分配片。为每个呼叫预留一条专有电路。如传统电话网络。</p><p>不适合计算机之间的通信。</p><h4 id="（2）分组交换"><a href="#（2）分组交换" class="headerlink" title="（2）分组交换"></a>（2）分组交换</h4><p>将传送的数据分成组，以分组packet为单位存储-转发。</p><p>存储-转发：被传输到下一个链路之前，整个分组必须到达路由器。 </p><p>排队和延迟：到达速率&gt;链路输出速率。</p><p><strong>网络核心的关键功能</strong></p><p>（1）路由：决定分组采用的源到目标的路径。</p><p>（2）转发：将分组从路由器的输入链路转移到输出链路。</p><h2 id="1-4-接入网和物理媒体"><a href="#1-4-接入网和物理媒体" class="headerlink" title="1.4 接入网和物理媒体"></a>1.4 接入网和物理媒体</h2><h3 id="1-4-1-接入网"><a href="#1-4-1-接入网" class="headerlink" title="1.4.1 接入网"></a>1.4.1 接入网</h3><h4 id="1、住宅接入：modem"><a href="#1、住宅接入：modem" class="headerlink" title="1、住宅接入：modem"></a>1、住宅接入：modem</h4><p>将上网数据调制加载到音频信号上，在电话线上传输，在局端将其中的数据解调出来。</p><p>带宽很窄,不能同时上网和通话。</p><h4 id="2、接入网：DSL"><a href="#2、接入网：DSL" class="headerlink" title="2、接入网：DSL"></a>2、接入网：DSL</h4><p><img src="/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/image-20220207133300830.png"></p><p>0~4kHz仍作音频传输，高于4k的一部分作下行，一部分作上行，使用额外的带宽，仍然采用调制和解调的方式。</p><h4 id="3、接入网：线缆网络"><a href="#3、接入网：线缆网络" class="headerlink" title="3、接入网：线缆网络"></a>3、接入网：线缆网络</h4><p>把有线电视信号线缆双向改造，在不同频段传输不同信道的数据。</p><p>线缆和光纤网路将各个家庭用户接入到ISP路由器。与DSL不同，各用户共享上行带宽。</p><h4 id="4、接入网：家庭网络"><a href="#4、接入网：家庭网络" class="headerlink" title="4、接入网：家庭网络"></a>4、接入网：家庭网络</h4><p><img src="/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/image-20220207134156849.png"></p><h4 id="5、企业接入网络"><a href="#5、企业接入网络" class="headerlink" title="5、企业接入网络"></a>5、企业接入网络</h4><p><img src="/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/image-20220207134345428.png"></p><p>通过交换机的集联。</p><h4 id="6、无线接入网络"><a href="#6、无线接入网络" class="headerlink" title="6、无线接入网络"></a>6、无线接入网络</h4><p>各无线端系统共享无线接入网络（端系统到路由器），通过无线LAN或广域无线接入的方式。</p><h3 id="1-4-2-物理媒体"><a href="#1-4-2-物理媒体" class="headerlink" title="1.4.2 物理媒体"></a>1.4.2 物理媒体</h3><p>物理链路：在每个传输-接收对，跨越一种物理媒体的介质。</p><p>导引型媒体：信号沿着固体媒介被导引，如同轴电缆、光纤、双绞线。非导引型媒体是信号自由传输。</p><p>无线链路：开放空间传输电磁波。无需物理线缆。</p><h2 id="1-5-Internet结构和ISP"><a href="#1-5-Internet结构和ISP" class="headerlink" title="1.5 Internet结构和ISP"></a>1.5 Internet结构和ISP</h2><p>互联网结构是网络的网络，端系统通过<strong>接入ISPs</strong>接到互联网。</p><p><img src="/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/image-20220215122033621.png"></p><p>然后内容提供商网络ICP可能会构建自己的网络（靠近ISP），将自己的服务、内容更加靠近用户，减少自己支出。</p><p><img src="/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/image-20220215124059819.png"></p><p><strong>第一层ISP</strong>完成全球的国家&#x2F;国际覆盖，点很少，速率极高。它们之间直接或通过IXP连接，并与大量的第二层ISP和其他客户网相连。</p><p><strong>第二层ISP</strong>（包括更小的区域ISP），与一个或多个第一层ISPs相连，也可能与第二层ISP相连。</p><p>终端通过local ISP、第三层、第二层、第一层ISP接入互联网。</p><h2 id="1-7-协议层次和服务模型"><a href="#1-7-协议层次和服务模型" class="headerlink" title="1.7  协议层次和服务模型"></a>1.7  协议层次和服务模型</h2><p>将网络的复杂功能分层，每层实现一组功能：本层协议实体交互执行本层的协议动作，通过接口访问下层的提供的服务，来实现本层的功能。</p><p><strong>协议</strong>：本层协议实体交互的应该遵守的协议动作的集合。</p><p><strong>数据单元DU：</strong>上层的服务数据单元SDU传给下层，加上一个头部封装成这一层的协议数据单元PDU。</p><p><img src="/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/image-20220215174311868.png"></p><p><strong>服务</strong>：低层实体向上层实体提供它们之间的通信的能力。服务访问点SAP用来区分上层不同服务用户的信息。</p><p>本层提供的服务不仅包括所有下层提供的服务，还包括同层之间通过接口实现的新的服务特性（可以向上层提供的服务）。</p><p><strong>原语</strong>：上层使用下层服务的形式，即提供什么类型的服务（面向连接的或无连接的）。</p><p><strong>Internet协议栈</strong></p><p><img src="/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/image-20220215175055180.png"></p><p><strong>传输层</strong>：在网络层主机到主机传输基础之上的进程到进程的区分数据传输；可靠。</p><p><strong>网络层</strong>：在链路层基础上，传输以分组为单位的端到端的数据；不可靠。</p><p><strong>链路层</strong>：以帧frame为单位，把bit组合根据帧头帧尾区分出一帧一帧，在<strong>相邻</strong>网点之间传送数据。</p><p><strong>各层次的协议数据单元：</strong></p><p><img src="/2022/02/15/categories/Computer_Networks/1.Computer_Network_Overview/image-20220215191048948.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
